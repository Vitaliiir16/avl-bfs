{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\n    this.value = value;\n    this.color = 'red'; // Нові вузли завжди червоні\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n  }\n}\n\n// Ліва ротація\nfunction leftRotate(root, x) {\n  const y = x.right;\n  x.right = y.left;\n  if (y.left !== null) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === null) {\n    root = y;\n  } else if (x === x.parent.left) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n  return root;\n}\n\n// Права ротація\nfunction rightRotate(root, y) {\n  const x = y.left;\n  y.left = x.right;\n  if (x.right !== null) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  if (y.parent === null) {\n    root = x;\n  } else if (y === y.parent.left) {\n    y.parent.left = x;\n  } else {\n    y.parent.right = x;\n  }\n  x.right = y;\n  y.parent = x;\n  return root;\n}\n\n// Вставка з балансуванням\nexport function insertNode(root, value) {\n  const newNode = new Node(value);\n  // Звичайна бінарна вставка\n  if (root === null) {\n    newNode.color = 'black';\n    return newNode;\n  }\n  let y = null;\n  let x = root;\n  while (x !== null) {\n    y = x;\n    if (newNode.value < x.value) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  newNode.parent = y;\n  if (newNode.value < y.value) {\n    y.left = newNode;\n  } else {\n    y.right = newNode;\n  }\n\n  // Відновлення властивостей червоно-чорного дерева\n  root = fixInsert(root, newNode);\n  return root;\n}\nfunction fixInsert(root, k) {\n  while (k.parent && k.parent.color === 'red') {\n    if (k.parent === k.parent.parent.left) {\n      let uncle = k.parent.parent.right;\n      if (uncle && uncle.color === 'red') {\n        // Випадок 1\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.right) {\n          // Випадок 2\n          k = k.parent;\n          root = leftRotate(root, k);\n        }\n        // Випадок 3\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = rightRotate(root, k.parent.parent);\n      }\n    } else {\n      let uncle = k.parent.parent.left;\n      if (uncle && uncle.color === 'red') {\n        // Випадок 1\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.left) {\n          // Випадок 2\n          k = k.parent;\n          root = rightRotate(root, k);\n        }\n        // Випадок 3\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = leftRotate(root, k.parent.parent);\n      }\n    }\n  }\n  root.color = 'black';\n  return root;\n}\n\n// Пошук вузла\nexport function searchNode(root, value) {\n  let current = root;\n  while (current) {\n    if (value === current.value) {\n      return current;\n    } else if (value < current.value) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n  return null;\n}\n\n// Видалення вузла з балансуванням\nexport function deleteNode(root, value) {\n  // Реалізація видалення з балансуванням може бути складною\n  // Для простоти, можна залишити як завдання для студента\n  // Але для повноти, ось спрощена версія\n\n  // Знайти вузол для видалення\n  let nodeToDelete = searchNode(root, value);\n  if (nodeToDelete === null) return root;\n\n  // Видалення вузла\n  root = deleteHelper(root, nodeToDelete);\n  return root;\n}\nfunction deleteHelper(root, z) {\n  let x, y;\n  if (z.left === null || z.right === null) {\n    y = z;\n  } else {\n    y = treeSuccessor(z);\n  }\n  if (y.left !== null) {\n    x = y.left;\n  } else {\n    x = y.right;\n  }\n  if (x !== null) {\n    x.parent = y.parent;\n  }\n  if (y.parent === null) {\n    root = x;\n  } else if (y === y.parent.left) {\n    y.parent.left = x;\n  } else {\n    y.parent.right = x;\n  }\n  if (y !== z) {\n    z.value = y.value;\n  }\n  if (y.color === 'black') {\n    root = fixDelete(root, x);\n  }\n  return root;\n}\nfunction fixDelete(root, x) {\n  while (x !== root && (x === null || x.color === 'black')) {\n    if (x === x.parent.left) {\n      let w = x.parent.right;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = leftRotate(root, x.parent);\n        w = x.parent.right;\n      }\n      if ((w.left === null || w.left.color === 'black') && (w.right === null || w.right.color === 'black')) {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.right === null || w.right.color === 'black') {\n          if (w.left) w.left.color = 'black';\n          w.color = 'red';\n          root = rightRotate(root, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        if (w.right) w.right.color = 'black';\n        root = leftRotate(root, x.parent);\n        x = root;\n      }\n    } else {\n      let w = x.parent.left;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = rightRotate(root, x.parent);\n        w = x.parent.left;\n      }\n      if ((w.left === null || w.left.color === 'black') && (w.right === null || w.right.color === 'black')) {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.left === null || w.left.color === 'black') {\n          if (w.right) w.right.color = 'black';\n          w.color = 'red';\n          root = leftRotate(root, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        if (w.left) w.left.color = 'black';\n        root = rightRotate(root, x.parent);\n        x = root;\n      }\n    }\n  }\n  if (x) x.color = 'black';\n  return root;\n}\nfunction treeSuccessor(x) {\n  if (x.right !== null) {\n    return treeMinimum(x.right);\n  }\n  let y = x.parent;\n  while (y !== null && x === y.right) {\n    x = y;\n    y = y.parent;\n  }\n  return y;\n}\nfunction treeMinimum(x) {\n  while (x.left !== null) {\n    x = x.left;\n  }\n  return x;\n}","map":{"version":3,"names":["Node","constructor","value","id","Math","random","toString","substr","color","left","right","parent","leftRotate","root","x","y","rightRotate","insertNode","newNode","fixInsert","k","uncle","searchNode","current","deleteNode","nodeToDelete","deleteHelper","z","treeSuccessor","fixDelete","w","treeMinimum"],"sources":["D:/dfs-rbt-visualization/src/components/RedBlackTree/rbtOperations.js"],"sourcesContent":["class Node {\r\n  constructor(value) {\r\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\r\n    this.value = value;\r\n    this.color = 'red'; // Нові вузли завжди червоні\r\n    this.left = null;\r\n    this.right = null;\r\n    this.parent = null;\r\n  }\r\n}\r\n\r\n// Ліва ротація\r\nfunction leftRotate(root, x) {\r\n  const y = x.right;\r\n  x.right = y.left;\r\n  if (y.left !== null) {\r\n    y.left.parent = x;\r\n  }\r\n  y.parent = x.parent;\r\n  if (x.parent === null) {\r\n    root = y;\r\n  } else if (x === x.parent.left) {\r\n    x.parent.left = y;\r\n  } else {\r\n    x.parent.right = y;\r\n  }\r\n  y.left = x;\r\n  x.parent = y;\r\n  return root;\r\n}\r\n\r\n// Права ротація\r\nfunction rightRotate(root, y) {\r\n  const x = y.left;\r\n  y.left = x.right;\r\n  if (x.right !== null) {\r\n    x.right.parent = y;\r\n  }\r\n  x.parent = y.parent;\r\n  if (y.parent === null) {\r\n    root = x;\r\n  } else if (y === y.parent.left) {\r\n    y.parent.left = x;\r\n  } else {\r\n    y.parent.right = x;\r\n  }\r\n  x.right = y;\r\n  y.parent = x;\r\n  return root;\r\n}\r\n\r\n// Вставка з балансуванням\r\nexport function insertNode(root, value) {\r\n  const newNode = new Node(value);\r\n  // Звичайна бінарна вставка\r\n  if (root === null) {\r\n    newNode.color = 'black';\r\n    return newNode;\r\n  }\r\n\r\n  let y = null;\r\n  let x = root;\r\n  while (x !== null) {\r\n    y = x;\r\n    if (newNode.value < x.value) {\r\n      x = x.left;\r\n    } else {\r\n      x = x.right;\r\n    }\r\n  }\r\n  newNode.parent = y;\r\n  if (newNode.value < y.value) {\r\n    y.left = newNode;\r\n  } else {\r\n    y.right = newNode;\r\n  }\r\n\r\n  // Відновлення властивостей червоно-чорного дерева\r\n  root = fixInsert(root, newNode);\r\n  return root;\r\n}\r\n\r\nfunction fixInsert(root, k) {\r\n  while (k.parent && k.parent.color === 'red') {\r\n    if (k.parent === k.parent.parent.left) {\r\n      let uncle = k.parent.parent.right;\r\n      if (uncle && uncle.color === 'red') {\r\n        // Випадок 1\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.right) {\r\n          // Випадок 2\r\n          k = k.parent;\r\n          root = leftRotate(root, k);\r\n        }\r\n        // Випадок 3\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = rightRotate(root, k.parent.parent);\r\n      }\r\n    } else {\r\n      let uncle = k.parent.parent.left;\r\n      if (uncle && uncle.color === 'red') {\r\n        // Випадок 1\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.left) {\r\n          // Випадок 2\r\n          k = k.parent;\r\n          root = rightRotate(root, k);\r\n        }\r\n        // Випадок 3\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = leftRotate(root, k.parent.parent);\r\n      }\r\n    }\r\n  }\r\n  root.color = 'black';\r\n  return root;\r\n}\r\n\r\n// Пошук вузла\r\nexport function searchNode(root, value) {\r\n  let current = root;\r\n  while (current) {\r\n    if (value === current.value) {\r\n      return current;\r\n    } else if (value < current.value) {\r\n      current = current.left;\r\n    } else {\r\n      current = current.right;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Видалення вузла з балансуванням\r\nexport function deleteNode(root, value) {\r\n  // Реалізація видалення з балансуванням може бути складною\r\n  // Для простоти, можна залишити як завдання для студента\r\n  // Але для повноти, ось спрощена версія\r\n\r\n  // Знайти вузол для видалення\r\n  let nodeToDelete = searchNode(root, value);\r\n  if (nodeToDelete === null) return root;\r\n\r\n  // Видалення вузла\r\n  root = deleteHelper(root, nodeToDelete);\r\n  return root;\r\n}\r\n\r\nfunction deleteHelper(root, z) {\r\n  let x, y;\r\n  if (z.left === null || z.right === null) {\r\n    y = z;\r\n  } else {\r\n    y = treeSuccessor(z);\r\n  }\r\n\r\n  if (y.left !== null) {\r\n    x = y.left;\r\n  } else {\r\n    x = y.right;\r\n  }\r\n\r\n  if (x !== null) {\r\n    x.parent = y.parent;\r\n  }\r\n\r\n  if (y.parent === null) {\r\n    root = x;\r\n  } else if (y === y.parent.left) {\r\n    y.parent.left = x;\r\n  } else {\r\n    y.parent.right = x;\r\n  }\r\n\r\n  if (y !== z) {\r\n    z.value = y.value;\r\n  }\r\n\r\n  if (y.color === 'black') {\r\n    root = fixDelete(root, x);\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\nfunction fixDelete(root, x) {\r\n  while (x !== root && (x === null || x.color === 'black')) {\r\n    if (x === x.parent.left) {\r\n      let w = x.parent.right;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = leftRotate(root, x.parent);\r\n        w = x.parent.right;\r\n      }\r\n      if ((w.left === null || w.left.color === 'black') &&\r\n          (w.right === null || w.right.color === 'black')) {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.right === null || w.right.color === 'black') {\r\n          if (w.left) w.left.color = 'black';\r\n          w.color = 'red';\r\n          root = rightRotate(root, w);\r\n          w = x.parent.right;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        if (w.right) w.right.color = 'black';\r\n        root = leftRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    } else {\r\n      let w = x.parent.left;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = rightRotate(root, x.parent);\r\n        w = x.parent.left;\r\n      }\r\n      if ((w.left === null || w.left.color === 'black') &&\r\n          (w.right === null || w.right.color === 'black')) {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.left === null || w.left.color === 'black') {\r\n          if (w.right) w.right.color = 'black';\r\n          w.color = 'red';\r\n          root = leftRotate(root, w);\r\n          w = x.parent.left;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        if (w.left) w.left.color = 'black';\r\n        root = rightRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    }\r\n  }\r\n  if (x) x.color = 'black';\r\n  return root;\r\n}\r\n\r\nfunction treeSuccessor(x) {\r\n  if (x.right !== null) {\r\n    return treeMinimum(x.right);\r\n  }\r\n  let y = x.parent;\r\n  while (y !== null && x === y.right) {\r\n    x = y;\r\n    y = y.parent;\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction treeMinimum(x) {\r\n  while (x.left !== null) {\r\n    x = x.left;\r\n  }\r\n  return x;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}