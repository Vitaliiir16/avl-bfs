{"ast":null,"code":"// src/components/Graph/algorithms/depthFirstSearch.js\n\nexport const depthFirstSearch = async (nodes, edges, startId, endId, updateNodeState, delay = 1000) => {\n  const visited = new Set();\n  const stack = [startId];\n  while (stack.length > 0) {\n    const current = stack.pop();\n    if (!visited.has(current)) {\n      visited.add(current);\n\n      // Оновлюємо стан поточної вершини на \"processing\"\n      updateNodeState(current, 'processing');\n\n      // Затримка для анімації\n      await new Promise(resolve => setTimeout(resolve, delay));\n      if (current === endId) {\n        // Якщо знайшли цільову вершину, оновлюємо її стан на \"target\"\n        updateNodeState(current, 'target');\n        alert(`Знайдено кінцеву вершину V${endId}`);\n        return;\n      }\n\n      // Отримуємо сусідів\n      const neighbors = edges.filter(edge => edge.from === current).map(edge => edge.to).filter(neighbor => !visited.has(neighbor));\n\n      // Додаємо сусідів у стек\n      neighbors.forEach(neighbor => stack.push(neighbor));\n\n      // Оновлюємо стан поточної вершини на \"visited\"\n      updateNodeState(current, 'visited');\n\n      // Затримка для анімації\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  alert('Цільова вершина не знайдена');\n};","map":{"version":3,"names":["depthFirstSearch","nodes","edges","startId","endId","updateNodeState","delay","visited","Set","stack","length","current","pop","has","add","Promise","resolve","setTimeout","alert","neighbors","filter","edge","from","map","to","neighbor","forEach","push"],"sources":["D:/kr/src/components/Graph/algorithms/depthFirstSearch.js"],"sourcesContent":["// src/components/Graph/algorithms/depthFirstSearch.js\r\n\r\nexport const depthFirstSearch = async (\r\n  nodes,\r\n  edges,\r\n  startId,\r\n  endId,\r\n  updateNodeState,\r\n  delay = 1000\r\n) => {\r\n  const visited = new Set();\r\n  const stack = [startId];\r\n\r\n  while (stack.length > 0) {\r\n    const current = stack.pop();\r\n\r\n    if (!visited.has(current)) {\r\n      visited.add(current);\r\n\r\n      // Оновлюємо стан поточної вершини на \"processing\"\r\n      updateNodeState(current, 'processing');\r\n\r\n      // Затримка для анімації\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n      if (current === endId) {\r\n        // Якщо знайшли цільову вершину, оновлюємо її стан на \"target\"\r\n        updateNodeState(current, 'target');\r\n        alert(`Знайдено кінцеву вершину V${endId}`);\r\n        return;\r\n      }\r\n\r\n      // Отримуємо сусідів\r\n      const neighbors = edges\r\n        .filter((edge) => edge.from === current)\r\n        .map((edge) => edge.to)\r\n        .filter((neighbor) => !visited.has(neighbor));\r\n\r\n      // Додаємо сусідів у стек\r\n      neighbors.forEach((neighbor) => stack.push(neighbor));\r\n\r\n      // Оновлюємо стан поточної вершини на \"visited\"\r\n      updateNodeState(current, 'visited');\r\n\r\n      // Затримка для анімації\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  alert('Цільова вершина не знайдена');\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAC9BC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,eAAe,EACfC,KAAK,GAAG,IAAI,KACT;EACH,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,CAACN,OAAO,CAAC;EAEvB,OAAOM,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,OAAO,GAAGF,KAAK,CAACG,GAAG,CAAC,CAAC;IAE3B,IAAI,CAACL,OAAO,CAACM,GAAG,CAACF,OAAO,CAAC,EAAE;MACzBJ,OAAO,CAACO,GAAG,CAACH,OAAO,CAAC;;MAEpB;MACAN,eAAe,CAACM,OAAO,EAAE,YAAY,CAAC;;MAEtC;MACA,MAAM,IAAII,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEV,KAAK,CAAC,CAAC;MAE1D,IAAIK,OAAO,KAAKP,KAAK,EAAE;QACrB;QACAC,eAAe,CAACM,OAAO,EAAE,QAAQ,CAAC;QAClCO,KAAK,CAAC,6BAA6Bd,KAAK,EAAE,CAAC;QAC3C;MACF;;MAEA;MACA,MAAMe,SAAS,GAAGjB,KAAK,CACpBkB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKX,OAAO,CAAC,CACvCY,GAAG,CAAEF,IAAI,IAAKA,IAAI,CAACG,EAAE,CAAC,CACtBJ,MAAM,CAAEK,QAAQ,IAAK,CAAClB,OAAO,CAACM,GAAG,CAACY,QAAQ,CAAC,CAAC;;MAE/C;MACAN,SAAS,CAACO,OAAO,CAAED,QAAQ,IAAKhB,KAAK,CAACkB,IAAI,CAACF,QAAQ,CAAC,CAAC;;MAErD;MACApB,eAAe,CAACM,OAAO,EAAE,SAAS,CAAC;;MAEnC;MACA,MAAM,IAAII,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEV,KAAK,CAAC,CAAC;IAC5D;EACF;EAEAY,KAAK,CAAC,6BAA6B,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}