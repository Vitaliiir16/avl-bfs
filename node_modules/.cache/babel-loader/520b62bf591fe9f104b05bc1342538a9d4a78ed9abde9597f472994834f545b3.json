{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\nimport EdgeList from './EdgeList/EdgeList';\nimport './Graph.css';\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [adjacencyList, setAdjacencyList] = useState({});\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [queue, setQueue] = useState([]);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [representation, setRepresentation] = useState('matrix');\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 300,\n      y: 50,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 200,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 400,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 250,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 400,\n      y: 250,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 300,\n      y: 350,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 1,\n      to: 3\n    }, {\n      from: 2,\n      to: 4\n    }, {\n      from: 3,\n      to: 5\n    }, {\n      from: 4,\n      to: 6\n    }, {\n      from: 5,\n      to: 6\n    }];\n    const initialAdjacencyList = {\n      1: [2, 3],\n      2: [4],\n      3: [5],\n      4: [6],\n      5: [6],\n      6: []\n    };\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n    setAdjacencyList(initialAdjacencyList);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const newNodeId = nodes.length + 1;\n    const newPositionX = 200 + newNodeId % 3 * 100;\n    const newPositionY = 50 + Math.floor((newNodeId - 1) / 3) * 100;\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: newPositionX,\n      y: newPositionY,\n      state: 'unvisited'\n    };\n    setNodes([...nodes, newNode]);\n    setAdjacencyList({\n      ...adjacencyList,\n      [newNodeId]: []\n    });\n    saveHistory();\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.some(node => node.id === nodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setNodes(nodes.filter(node => node.id !== nodeId));\n    setEdges(edges.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n    const updatedAdjacencyList = {\n      ...adjacencyList\n    };\n    delete updatedAdjacencyList[nodeId];\n    for (const key in updatedAdjacencyList) {\n      updatedAdjacencyList[key] = updatedAdjacencyList[key].filter(neighbor => neighbor !== nodeId);\n    }\n    setAdjacencyList(updatedAdjacencyList);\n    saveHistory();\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !nodes.some(node => node.id === fromId) || !nodes.some(node => node.id === toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setEdges([...edges, {\n      from: fromId,\n      to: toId\n    }]);\n    setAdjacencyList({\n      ...adjacencyList,\n      [fromId]: [...adjacencyList[fromId], toId]\n    });\n    saveHistory();\n  };\n  const deleteEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !edges.some(edge => edge.from === fromId && edge.to === toId)) {\n      alert('Ребро не знайдено');\n      return;\n    }\n    setEdges(edges.filter(edge => !(edge.from === fromId && edge.to === toId)));\n    setAdjacencyList({\n      ...adjacencyList,\n      [fromId]: adjacencyList[fromId].filter(neighbor => neighbor !== toId)\n    });\n    saveHistory();\n  };\n  const startDFS = async () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    if (isNaN(startNodeId) || !nodes.some(node => node.id === startNodeId)) {\n      alert('Некоректний ID початкової вершини');\n      return;\n    }\n    setIsRunning(true);\n    setIsPaused(false);\n    await dfsAlgorithm(nodes, adjacencyList, startNodeId, setNodes, setIsPaused);\n    setIsRunning(false);\n  };\n  const pauseDFS = () => {\n    setIsPaused(!isPaused);\n  };\n  const saveHistory = () => {\n    setHistory([...history, {\n      nodes: [...nodes],\n      edges: [...edges],\n      adjacencyList: {\n        ...adjacencyList\n      }\n    }]);\n  };\n  const renderGraph = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"800\",\n    height: \"600\",\n    children: [edges.map((edge, index) => {\n      const fromNode = nodes.find(node => node.id === edge.from);\n      const toNode = nodes.find(node => node.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: fromNode.x,\n        y1: fromNode.y,\n        x2: toNode.x,\n        y2: toNode.y,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"10\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: \"gray\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"15\",\n        children: node.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0413\\u0440\\u0430\\u0444\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"representation-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('matrix'),\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('list'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('edges'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0420\\u0435\\u0431\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), representation === 'matrix' && /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 39\n    }, this), representation === 'list' && /*#__PURE__*/_jsxDEV(AdjacencyList, {\n      adjacencyList: adjacencyList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 37\n    }, this), representation === 'edges' && /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEdge,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteEdge,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseDFS,\n        disabled: !isRunning,\n        children: isPaused ? 'Продовжити' : 'Пауза'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"Rn4z8eoOFIfjuLsVtP+VScyJV7I=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","AdjacencyMatrix","AdjacencyList","EdgeList","dfsAlgorithm","jsxDEV","_jsxDEV","Graph","_s","adjacencyList","setAdjacencyList","nodes","setNodes","edges","setEdges","history","setHistory","isRunning","setIsRunning","isPaused","setIsPaused","queue","setQueue","currentNode","setCurrentNode","representation","setRepresentation","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","initialAdjacencyList","addNode","length","alert","newNodeId","newPositionX","newPositionY","Math","floor","newNode","saveHistory","deleteNode","nodeId","parseInt","prompt","isNaN","some","node","filter","edge","updatedAdjacencyList","key","neighbor","addEdge","fromId","toId","deleteEdge","startDFS","startNodeId","pauseDFS","renderGraph","width","height","children","map","index","fromNode","find","toNode","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\r\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\r\nimport EdgeList from './EdgeList/EdgeList';\r\nimport './Graph.css';\r\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\r\n\r\nconst Graph = () => {\r\n  const [adjacencyList, setAdjacencyList] = useState({});\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [queue, setQueue] = useState([]);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [representation, setRepresentation] = useState('matrix');\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 300, y: 50, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 200, y: 150, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 400, y: 150, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 250, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 400, y: 250, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 300, y: 350, state: 'unvisited' },\r\n    ];\r\n\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 1, to: 3 },\r\n      { from: 2, to: 4 },\r\n      { from: 3, to: 5 },\r\n      { from: 4, to: 6 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n\r\n    const initialAdjacencyList = {\r\n      1: [2, 3],\r\n      2: [4],\r\n      3: [5],\r\n      4: [6],\r\n      5: [6],\r\n      6: [],\r\n    };\r\n\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n    setAdjacencyList(initialAdjacencyList);\r\n  };\r\n\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n\r\n    const newNodeId = nodes.length + 1;\r\n    const newPositionX = 200 + (newNodeId % 3) * 100;\r\n    const newPositionY = 50 + Math.floor((newNodeId - 1) / 3) * 100;\r\n\r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: newPositionX,\r\n      y: newPositionY,\r\n      state: 'unvisited',\r\n    };\r\n\r\n    setNodes([...nodes, newNode]);\r\n    setAdjacencyList({ ...adjacencyList, [newNodeId]: [] });\r\n    saveHistory();\r\n  };\r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.some((node) => node.id === nodeId)) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setNodes(nodes.filter((node) => node.id !== nodeId));\r\n    setEdges(edges.filter((edge) => edge.from !== nodeId && edge.to !== nodeId));\r\n    const updatedAdjacencyList = { ...adjacencyList };\r\n    delete updatedAdjacencyList[nodeId];\r\n    for (const key in updatedAdjacencyList) {\r\n      updatedAdjacencyList[key] = updatedAdjacencyList[key].filter((neighbor) => neighbor !== nodeId);\r\n    }\r\n    setAdjacencyList(updatedAdjacencyList);\r\n    saveHistory();\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !nodes.some((node) => node.id === fromId) ||\r\n      !nodes.some((node) => node.id === toId)\r\n    ) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    setEdges([...edges, { from: fromId, to: toId }]);\r\n    setAdjacencyList({ ...adjacencyList, [fromId]: [...adjacencyList[fromId], toId] });\r\n    saveHistory();\r\n  };\r\n\r\n  const deleteEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !edges.some((edge) => edge.from === fromId && edge.to === toId)\r\n    ) {\r\n      alert('Ребро не знайдено');\r\n      return;\r\n    }\r\n\r\n    setEdges(edges.filter((edge) => !(edge.from === fromId && edge.to === toId)));\r\n    setAdjacencyList({\r\n      ...adjacencyList,\r\n      [fromId]: adjacencyList[fromId].filter((neighbor) => neighbor !== toId),\r\n    });\r\n    saveHistory();\r\n  };\r\n\r\n  const startDFS = async () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\r\n    if (isNaN(startNodeId) || !nodes.some((node) => node.id === startNodeId)) {\r\n      alert('Некоректний ID початкової вершини');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n\r\n    await dfsAlgorithm(nodes, adjacencyList, startNodeId, setNodes, setIsPaused);\r\n\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  const saveHistory = () => {\r\n    setHistory([...history, { nodes: [...nodes], edges: [...edges], adjacencyList: { ...adjacencyList } }]);\r\n  };\r\n\r\n  const renderGraph = () => (\r\n    <svg width=\"800\" height=\"600\">\r\n      {edges.map((edge, index) => {\r\n        const fromNode = nodes.find((node) => node.id === edge.from);\r\n        const toNode = nodes.find((node) => node.id === edge.to);\r\n        if (!fromNode || !toNode) return null;\r\n        return (\r\n          <line\r\n            key={index}\r\n            x1={fromNode.x}\r\n            y1={fromNode.y}\r\n            x2={toNode.x}\r\n            y2={toNode.y}\r\n            stroke=\"black\"\r\n            markerEnd=\"url(#arrowhead)\"\r\n          />\r\n        );\r\n      })}\r\n      <defs>\r\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\r\n          <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n        </marker>\r\n      </defs>\r\n      {nodes.map((node) => (\r\n        <g key={node.id}>\r\n          <circle cx={node.x} cy={node.y} r=\"20\" fill=\"gray\" />\r\n          <text x={node.x} y={node.y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"15\">\r\n            {node.label}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Графа</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n      <div className=\"representation-controls\">\r\n        <button onClick={() => setRepresentation('matrix')}>Матриця Суміжності</button>\r\n        <button onClick={() => setRepresentation('list')}>Список Суміжності</button>\r\n        <button onClick={() => setRepresentation('edges')}>Список Ребер</button>\r\n      </div>\r\n      {representation === 'matrix' && <AdjacencyMatrix nodes={nodes} edges={edges} />}\r\n      {representation === 'list' && <AdjacencyList adjacencyList={adjacencyList} />}\r\n      {representation === 'edges' && <EdgeList edges={edges} />}\r\n      <div className=\"controls\">\r\n        <button onClick={addNode}>Додати Вершину</button>\r\n        <button onClick={deleteNode}>Видалити Вершину</button>\r\n        <button onClick={addEdge}>Додати Ребро</button>\r\n        <button onClick={deleteEdge}>Видалити Ребро</button>\r\n        <button onClick={startDFS}>Старт</button>\r\n        <button onClick={pauseDFS} disabled={!isRunning}>\r\n          {isPaused ? 'Продовжити' : 'Пауза'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}