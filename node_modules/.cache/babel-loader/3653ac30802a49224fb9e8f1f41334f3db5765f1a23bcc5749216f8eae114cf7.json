{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport Controls from './Controls';\nimport Visualization from './Visualization';\nimport RepresentationControls from './RepresentationControls';\nimport CurrentNode from './CurrentNode';\nimport AdjacencyMatrix from './adjacencyMatrix/AdjacencyMatrix';\nimport EdgeList from './edgeList/EdgeList';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [stepHistory, setStepHistory] = useState([]);\n  const [representation, setRepresentation] = useState('matrix');\n  const [delay, setDelay] = useState(1000);\n  const [stack, setStack] = useState([]);\n  const isPausedRef = useRef(isPaused);\n  const nodesRef = useRef(nodes);\n  const timeoutRef = useRef(null);\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n  useEffect(() => {\n    nodesRef.current = nodes;\n  }, [nodes]);\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 200,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 400,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 600,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 400,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 600,\n      y: 200,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 3,\n      to: 4\n    }, {\n      from: 4,\n      to: 5\n    }, {\n      from: 5,\n      to: 6\n    }];\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const newNodeId = nodes.length + 1;\n    const predefinedPositions = {\n      7: {\n        x: 200,\n        y: 300\n      },\n      8: {\n        x: 400,\n        y: 300\n      },\n      9: {\n        x: 600,\n        y: 300\n      },\n      10: {\n        x: 200,\n        y: 400\n      },\n      11: {\n        x: 400,\n        y: 400\n      },\n      12: {\n        x: 600,\n        y: 400\n      },\n      13: {\n        x: 200,\n        y: 500\n      },\n      14: {\n        x: 400,\n        y: 500\n      },\n      15: {\n        x: 600,\n        y: 500\n      }\n    };\n    const position = predefinedPositions[newNodeId];\n    if (!position) {\n      alert('Немає визначеної позиції для нової вершини.');\n      return;\n    }\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: position.x,\n      y: position.y,\n      state: 'unvisited'\n    };\n    setNodes(prev => [...prev, newNode]);\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.some(node => node.id === nodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setNodes(prev => prev.filter(node => node.id !== nodeId));\n    setEdges(prev => prev.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !nodes.some(node => node.id === fromId) || !nodes.some(node => node.id === toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setEdges(prev => [...prev, {\n      from: fromId,\n      to: toId\n    }]);\n  };\n  const deleteEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !edges.some(edge => edge.from === fromId && edge.to === toId)) {\n      alert('Ребро не знайдено');\n      return;\n    }\n    setEdges(prev => prev.filter(edge => !(edge.from === fromId && edge.to === toId)));\n  };\n  const updateNodeState = useCallback((id, state) => {\n    setNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n      ...node,\n      state\n    } : node));\n    setCurrentNode(id);\n  }, []);\n  useEffect(() => {\n    if (isRunning && !isPaused && stack.length > 0) {\n      timeoutRef.current = setTimeout(async () => {\n        const current = stack[stack.length - 1];\n        setStack(prevStack => prevStack.slice(0, -1));\n        const currentNode = nodesRef.current.find(node => node.id === current);\n        if (!currentNode || currentNode.state !== 'unvisited') {\n          return;\n        }\n        updateNodeState(current, 'processing');\n        setStepHistory(prevHistory => [...prevHistory, current]);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        if (current === targetNode) {\n          updateNodeState(current, 'target');\n          alert(`Знайдено кінцеву вершину V${targetNode}`);\n          setIsRunning(false);\n          return;\n        }\n        const neighbors = edges.filter(edge => edge.from === current).map(edge => edge.to).filter(neighborId => {\n          const neighbor = nodesRef.current.find(node => node.id === neighborId);\n          return neighbor && neighbor.state === 'unvisited';\n        });\n        setStack(prevStack => [...prevStack, ...neighbors.reverse()]);\n        updateNodeState(current, 'visited');\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }, delay);\n    }\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isRunning, isPaused, stack, edges, delay, targetNode, updateNodeState]);\n  const startDFS = () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    const endNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\n    if (isNaN(startNodeId) || isNaN(endNodeId) || !nodes.some(node => node.id === startNodeId) || !nodes.some(node => node.id === endNodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setIsRunning(true);\n    setIsPaused(false);\n    setTargetNode(endNodeId);\n    setNodes(prevNodes => prevNodes.map(node => node.id === endNodeId ? {\n      ...node,\n      state: 'unvisited'\n    } : {\n      ...node,\n      state: 'unvisited'\n    }));\n    setStack([startNodeId]);\n  };\n  const pauseDFS = () => {\n    setIsPaused(prevPaused => !prevPaused);\n  };\n  const undoDFS = () => {\n    if (stepHistory.length === 0) {\n      alert('Немає попередніх кроків для відкату.');\n      return;\n    }\n    const newHistory = [...stepHistory];\n    const lastVisitedNode = newHistory.pop();\n    setNodes(prev => prev.map(node => {\n      if (node.id === lastVisitedNode) return {\n        ...node,\n        state: 'unvisited'\n      };\n      return node;\n    }));\n    setStepHistory(newHistory);\n    setStack(prevStack => [...prevStack, lastVisitedNode]);\n    const previousNode = newHistory[newHistory.length - 1] || null;\n    setCurrentNode(previousNode);\n  };\n  const resetGraph = () => {\n    setNodes(prev => prev.map(node => ({\n      ...node,\n      state: 'unvisited'\n    })));\n    setStepHistory([]);\n    setCurrentNode(null);\n    setTargetNode(null);\n    setIsRunning(false);\n    setIsPaused(false);\n    setStack([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 \\u0432 \\u0413\\u043B\\u0438\\u0431\\u0438\\u043D\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Visualization, {\n      nodes: nodes,\n      edges: edges,\n      target: targetNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      onAddNode: addNode,\n      onDeleteNode: deleteNode,\n      onAddEdge: addEdge,\n      onDeleteEdge: deleteEdge,\n      onStartDFS: startDFS,\n      onPauseDFS: pauseDFS,\n      onUndoDFS: undoDFS,\n      onResetGraph: resetGraph,\n      isRunning: isRunning,\n      isPaused: isPaused,\n      delay: delay,\n      setDelay: setDelay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentNode, {\n      node: currentNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RepresentationControls, {\n      setView: setRepresentation,\n      currentView: representation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), representation === 'matrix' ? /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), isRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-stack\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Stack: \", stack.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"oI53znZQ2w1pYD//hCudQtIKQxU=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Link","Controls","Visualization","RepresentationControls","CurrentNode","AdjacencyMatrix","EdgeList","jsxDEV","_jsxDEV","Graph","_s","nodes","setNodes","edges","setEdges","isRunning","setIsRunning","isPaused","setIsPaused","currentNode","setCurrentNode","targetNode","setTargetNode","stepHistory","setStepHistory","representation","setRepresentation","delay","setDelay","stack","setStack","isPausedRef","nodesRef","timeoutRef","current","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","addNode","length","alert","newNodeId","predefinedPositions","position","newNode","prev","deleteNode","nodeId","parseInt","prompt","isNaN","some","node","filter","edge","addEdge","fromId","toId","deleteEdge","updateNodeState","prevNodes","map","setTimeout","prevStack","slice","find","prevHistory","Promise","resolve","neighbors","neighborId","neighbor","reverse","clearTimeout","startDFS","startNodeId","endNodeId","pauseDFS","prevPaused","undoDFS","newHistory","lastVisitedNode","pop","previousNode","resetGraph","className","children","fileName","_jsxFileName","lineNumber","columnNumber","target","onAddNode","onDeleteNode","onAddEdge","onDeleteEdge","onStartDFS","onPauseDFS","onUndoDFS","onResetGraph","setView","currentView","join","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Controls from './Controls';\r\nimport Visualization from './Visualization';\r\nimport RepresentationControls from './RepresentationControls';\r\nimport CurrentNode from './CurrentNode';\r\nimport AdjacencyMatrix from './adjacencyMatrix/AdjacencyMatrix';\r\nimport EdgeList from './edgeList/EdgeList';\r\nimport './Graph.css';\r\n\r\nconst Graph = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [targetNode, setTargetNode] = useState(null);\r\n  const [stepHistory, setStepHistory] = useState([]);\r\n  const [representation, setRepresentation] = useState('matrix');\r\n  const [delay, setDelay] = useState(1000);\r\n  const [stack, setStack] = useState([]);\r\n  const isPausedRef = useRef(isPaused);\r\n  const nodesRef = useRef(nodes);\r\n  const timeoutRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    isPausedRef.current = isPaused;\r\n  }, [isPaused]);\r\n\r\n  useEffect(() => {\r\n    nodesRef.current = nodes;\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 200, y: 100, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 400, y: 100, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 600, y: 100, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 200, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 400, y: 200, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 600, y: 200, state: 'unvisited' },\r\n    ];\r\n  \r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 2, to: 3 },\r\n      { from: 3, to: 4 },\r\n      { from: 4, to: 5 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n  \r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n  };\r\n  \r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n  \r\n    const newNodeId = nodes.length + 1;\r\n  \r\n    const predefinedPositions = {\r\n      7: { x: 200, y: 300 },  \r\n      8: { x: 400, y: 300 },  \r\n      9: { x: 600, y: 300 }, \r\n      10: { x: 200, y: 400 },\r\n      11: { x: 400, y: 400 }, \r\n      12: { x: 600, y: 400 },\r\n      13: { x: 200, y: 500 },\r\n      14: { x: 400, y: 500 },\r\n      15: { x: 600, y: 500 },\r\n    };\r\n  \r\n    const position = predefinedPositions[newNodeId];\r\n    if (!position) {\r\n      alert('Немає визначеної позиції для нової вершини.');\r\n      return;\r\n    }\r\n  \r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: position.x,\r\n      y: position.y,\r\n      state: 'unvisited',\r\n    };\r\n  \r\n    setNodes((prev) => [...prev, newNode]);\r\n  };\r\n  \r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.some((node) => node.id === nodeId)) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setNodes((prev) => prev.filter((node) => node.id !== nodeId));\r\n    setEdges((prev) =>\r\n      prev.filter((edge) => edge.from !== nodeId && edge.to !== nodeId)\r\n    );\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !nodes.some((node) => node.id === fromId) ||\r\n      !nodes.some((node) => node.id === toId)\r\n    ) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) => [...prev, { from: fromId, to: toId }]);\r\n  };\r\n\r\n  const deleteEdge = () => {\r\n    const fromId = parseInt(\r\n      prompt('Введіть ID вихідної вершини для видалення ребра:'),\r\n      10\r\n    );\r\n    const toId = parseInt(\r\n      prompt('Введіть ID цільової вершини для видалення ребра:'),\r\n      10\r\n    );\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !edges.some((edge) => edge.from === fromId && edge.to === toId)\r\n    ) {\r\n      alert('Ребро не знайдено');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) =>\r\n      prev.filter(\r\n        (edge) => !(edge.from === fromId && edge.to === toId)\r\n      )\r\n    );\r\n  };\r\n\r\n  const updateNodeState = useCallback((id, state) => {\r\n    setNodes((prevNodes) =>\r\n      prevNodes.map((node) =>\r\n        node.id === id ? { ...node, state } : node\r\n      )\r\n    );\r\n    setCurrentNode(id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused && stack.length > 0) {\r\n      timeoutRef.current = setTimeout(async () => {\r\n        const current = stack[stack.length - 1];\r\n\r\n        setStack((prevStack) => prevStack.slice(0, -1));\r\n\r\n        const currentNode = nodesRef.current.find((node) => node.id === current);\r\n        if (!currentNode || currentNode.state !== 'unvisited') {\r\n          return;\r\n        }\r\n\r\n        updateNodeState(current, 'processing');\r\n        setStepHistory((prevHistory) => [...prevHistory, current]);\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n        if (current === targetNode) {\r\n          updateNodeState(current, 'target');\r\n          alert(`Знайдено кінцеву вершину V${targetNode}`);\r\n          setIsRunning(false);\r\n          return;\r\n        }\r\n\r\n        const neighbors = edges\r\n          .filter((edge) => edge.from === current)\r\n          .map((edge) => edge.to)\r\n          .filter((neighborId) => {\r\n            const neighbor = nodesRef.current.find((node) => node.id === neighborId);\r\n            return neighbor && neighbor.state === 'unvisited';\r\n          });\r\n\r\n        setStack((prevStack) => [...prevStack, ...neighbors.reverse()]);\r\n\r\n        updateNodeState(current, 'visited');\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n      }, delay);\r\n    }\r\n\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, [isRunning, isPaused, stack, edges, delay, targetNode, updateNodeState]);\r\n\r\n  const startDFS = () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(\r\n      prompt('Введіть ID початкової вершини:'),\r\n      10\r\n    );\r\n    const endNodeId = parseInt(\r\n      prompt('Введіть ID кінцевої вершини:'),\r\n      10\r\n    );\r\n\r\n    if (\r\n      isNaN(startNodeId) ||\r\n      isNaN(endNodeId) ||\r\n      !nodes.some((node) => node.id === startNodeId) ||\r\n      !nodes.some((node) => node.id === endNodeId)\r\n    ) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n    setTargetNode(endNodeId);\r\n\r\n    setNodes((prevNodes) =>\r\n      prevNodes.map((node) =>\r\n        node.id === endNodeId\r\n          ? { ...node, state: 'unvisited' }\r\n          : { ...node, state: 'unvisited' }\r\n      )\r\n    );\r\n\r\n    setStack([startNodeId]);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused((prevPaused) => !prevPaused);\r\n  };\r\n\r\n  const undoDFS = () => {\r\n    if (stepHistory.length === 0) {\r\n      alert('Немає попередніх кроків для відкату.');\r\n      return;\r\n    }\r\n\r\n    const newHistory = [...stepHistory];\r\n    const lastVisitedNode = newHistory.pop();\r\n\r\n    setNodes((prev) =>\r\n      prev.map((node) => {\r\n        if (node.id === lastVisitedNode) return { ...node, state: 'unvisited' };\r\n        return node;\r\n      })\r\n    );\r\n\r\n    setStepHistory(newHistory);\r\n\r\n    setStack((prevStack) => [...prevStack, lastVisitedNode]);\r\n\r\n    const previousNode = newHistory[newHistory.length - 1] || null;\r\n    setCurrentNode(previousNode);\r\n  };\r\n\r\n  const resetGraph = () => {\r\n    setNodes((prev) =>\r\n      prev.map((node) => ({\r\n        ...node,\r\n        state: 'unvisited',\r\n      }))\r\n    );\r\n    setStepHistory([]);\r\n    setCurrentNode(null);\r\n    setTargetNode(null);\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n    setStack([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Пошуку в Глибину (DFS)</h1>\r\n      <Visualization nodes={nodes} edges={edges} target={targetNode} />\r\n      <Controls\r\n        onAddNode={addNode}\r\n        onDeleteNode={deleteNode}\r\n        onAddEdge={addEdge}\r\n        onDeleteEdge={deleteEdge}\r\n        onStartDFS={startDFS}\r\n        onPauseDFS={pauseDFS}\r\n        onUndoDFS={undoDFS}\r\n        onResetGraph={resetGraph}\r\n        isRunning={isRunning}\r\n        isPaused={isPaused}\r\n        delay={delay}\r\n        setDelay={setDelay}\r\n      />\r\n      <CurrentNode node={currentNode} />\r\n      <RepresentationControls\r\n        setView={setRepresentation}\r\n        currentView={representation}\r\n      />\r\n      {representation === 'matrix' ? (\r\n        <AdjacencyMatrix nodes={nodes} edges={edges} />\r\n      ) : (\r\n        <EdgeList edges={edges} />\r\n      )}\r\n      {isRunning && (\r\n        <div className=\"current-stack\">\r\n          <p>Current Stack: {stack.join(', ')}</p>\r\n        </div>\r\n      )}\r\n      <Link to=\"/\">\r\n        <button>Home</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}