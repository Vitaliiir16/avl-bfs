{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\nimport EdgeList from './EdgeList/EdgeList';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [adjacencyList, setAdjacencyList] = useState({});\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [visitedStack, setVisitedStack] = useState([]);\n  const [representation, setRepresentation] = useState('matrix');\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 200,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 300,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 400,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 300,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 400,\n      y: 300,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 3,\n      to: 6\n    }, {\n      from: 1,\n      to: 4\n    }, {\n      from: 4,\n      to: 5\n    }, {\n      from: 5,\n      to: 6\n    }];\n    const initialAdjacencyList = {\n      1: [2, 4],\n      2: [3],\n      3: [6],\n      4: [5],\n      5: [6],\n      6: []\n    };\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n    setAdjacencyList(initialAdjacencyList);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const newNodeId = nodes.length + 1;\n    const newX = 200 + newNodeId % 3 * 100;\n    const newY = 200 + Math.floor((newNodeId - 1) / 3) * 100;\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: newX,\n      y: newY,\n      state: 'unvisited'\n    };\n    setNodes(prev => [...prev, newNode]);\n    setAdjacencyList(prev => ({\n      ...prev,\n      [newNodeId]: []\n    }));\n    saveHistory();\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.some(node => node.id === nodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setNodes(prev => prev.filter(node => node.id !== nodeId));\n    setEdges(prev => prev.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n    setAdjacencyList(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[nodeId];\n      for (const key in updated) {\n        updated[key] = updated[key].filter(neighbor => neighbor !== nodeId);\n      }\n      return updated;\n    });\n    saveHistory();\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !nodes.some(node => node.id === fromId) || !nodes.some(node => node.id === toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setEdges(prev => [...prev, {\n      from: fromId,\n      to: toId\n    }]);\n    setAdjacencyList(prev => ({\n      ...prev,\n      [fromId]: [...(prev[fromId] || []), toId]\n    }));\n    saveHistory();\n  };\n  const deleteEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !edges.some(edge => edge.from === fromId && edge.to === toId)) {\n      alert('Ребро не знайдено');\n      return;\n    }\n    setEdges(prev => prev.filter(edge => !(edge.from === fromId && edge.to === toId)));\n    setAdjacencyList(prev => ({\n      ...prev,\n      [fromId]: prev[fromId].filter(neighbor => neighbor !== toId)\n    }));\n    saveHistory();\n  };\n  const startDFS = async () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    if (isNaN(startNodeId) || !nodes.some(node => node.id === startNodeId)) {\n      alert('Некоректний ID початкової вершини');\n      return;\n    }\n    setIsRunning(true);\n    setIsPaused(false);\n    setVisitedStack([startNodeId]);\n    setCurrentNode(startNodeId);\n    while (visitedStack.length > 0 && !isPaused) {\n      const current = visitedStack.pop();\n      setCurrentNode(current);\n      setNodes(prev => prev.map(node => node.id === current ? {\n        ...node,\n        state: 'processing'\n      } : node));\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const neighbors = adjacencyList[current] || [];\n      neighbors.forEach(neighbor => {\n        if (!nodes.find(node => node.id === neighbor).state.includes('visited')) {\n          setVisitedStack(prev => [...prev, neighbor]);\n        }\n      });\n      setNodes(prev => prev.map(node => node.id === current ? {\n        ...node,\n        state: 'visited'\n      } : node));\n      setCurrentNode(null);\n    }\n    setIsRunning(false);\n  };\n  const pauseDFS = () => {\n    setIsPaused(!isPaused);\n  };\n  const undo = () => {\n    if (history.length === 0) {\n      alert('Немає попередніх станів для відкату.');\n      return;\n    }\n    const previousState = history.pop();\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    setAdjacencyList(previousState.adjacencyList);\n  };\n  const saveHistory = () => {\n    setHistory(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges],\n      adjacencyList: {\n        ...adjacencyList\n      }\n    }]);\n  };\n  const renderGraph = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"800\",\n    height: \"600\",\n    children: [edges.map((edge, index) => {\n      const fromNode = nodes.find(node => node.id === edge.from);\n      const toNode = nodes.find(node => node.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: fromNode.x,\n        y1: fromNode.y,\n        x2: toNode.x,\n        y2: toNode.y,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"10\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: node.state === 'unvisited' ? 'gray' : node.state === 'processing' ? 'orange' : 'black'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"15\",\n        children: node.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0413\\u043B\\u0438\\u0431\\u043E\\u043A\\u043E\\u0433\\u043E \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"representation-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('matrix'),\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('list'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('edges'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0420\\u0435\\u0431\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), representation === 'matrix' && /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 39\n    }, this), representation === 'list' && /*#__PURE__*/_jsxDEV(AdjacencyList, {\n      adjacencyList: adjacencyList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 37\n    }, this), representation === 'edges' && /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEdge,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteEdge,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseDFS,\n        disabled: !isRunning,\n        children: isPaused ? 'Продовжити' : 'Пауза'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), currentNode && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u041F\\u043E\\u0442\\u043E\\u0447\\u043D\\u0430 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0430: V\", currentNode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"dGbze7CpxmsKzvJCp3gbBZllmcg=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","Link","AdjacencyMatrix","AdjacencyList","EdgeList","jsxDEV","_jsxDEV","Graph","_s","adjacencyList","setAdjacencyList","nodes","setNodes","edges","setEdges","history","setHistory","isRunning","setIsRunning","isPaused","setIsPaused","currentNode","setCurrentNode","visitedStack","setVisitedStack","representation","setRepresentation","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","initialAdjacencyList","addNode","length","alert","newNodeId","newX","newY","Math","floor","newNode","prev","saveHistory","deleteNode","nodeId","parseInt","prompt","isNaN","some","node","filter","edge","updated","key","neighbor","addEdge","fromId","toId","deleteEdge","startDFS","startNodeId","current","pop","map","Promise","resolve","setTimeout","neighbors","forEach","find","includes","pauseDFS","undo","previousState","renderGraph","width","height","children","index","fromNode","toNode","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\r\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\r\nimport EdgeList from './EdgeList/EdgeList';\r\nimport './Graph.css';\r\n\r\nconst Graph = () => {\r\n  const [adjacencyList, setAdjacencyList] = useState({});\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [visitedStack, setVisitedStack] = useState([]);\r\n  const [representation, setRepresentation] = useState('matrix');\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 200, y: 200, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 300, y: 200, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 400, y: 200, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 300, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 300, y: 300, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 400, y: 300, state: 'unvisited' },\r\n    ];\r\n\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 2, to: 3 },\r\n      { from: 3, to: 6 },\r\n      { from: 1, to: 4 },\r\n      { from: 4, to: 5 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n\r\n    const initialAdjacencyList = {\r\n      1: [2, 4],\r\n      2: [3],\r\n      3: [6],\r\n      4: [5],\r\n      5: [6],\r\n      6: [],\r\n    };\r\n\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n    setAdjacencyList(initialAdjacencyList);\r\n  };\r\n\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n\r\n    const newNodeId = nodes.length + 1;\r\n    const newX = 200 + (newNodeId % 3) * 100;\r\n    const newY = 200 + Math.floor((newNodeId - 1) / 3) * 100;\r\n\r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: newX,\r\n      y: newY,\r\n      state: 'unvisited',\r\n    };\r\n\r\n    setNodes((prev) => [...prev, newNode]);\r\n    setAdjacencyList((prev) => ({ ...prev, [newNodeId]: [] }));\r\n    saveHistory();\r\n  };\r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.some((node) => node.id === nodeId)) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setNodes((prev) => prev.filter((node) => node.id !== nodeId));\r\n    setEdges((prev) => prev.filter((edge) => edge.from !== nodeId && edge.to !== nodeId));\r\n    setAdjacencyList((prev) => {\r\n      const updated = { ...prev };\r\n      delete updated[nodeId];\r\n      for (const key in updated) {\r\n        updated[key] = updated[key].filter((neighbor) => neighbor !== nodeId);\r\n      }\r\n      return updated;\r\n    });\r\n    saveHistory();\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !nodes.some((node) => node.id === fromId) ||\r\n      !nodes.some((node) => node.id === toId)\r\n    ) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) => [...prev, { from: fromId, to: toId }]);\r\n    setAdjacencyList((prev) => ({\r\n      ...prev,\r\n      [fromId]: [...(prev[fromId] || []), toId],\r\n    }));\r\n    saveHistory();\r\n  };\r\n\r\n  const deleteEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !edges.some((edge) => edge.from === fromId && edge.to === toId)\r\n    ) {\r\n      alert('Ребро не знайдено');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) => prev.filter((edge) => !(edge.from === fromId && edge.to === toId)));\r\n    setAdjacencyList((prev) => ({\r\n      ...prev,\r\n      [fromId]: prev[fromId].filter((neighbor) => neighbor !== toId),\r\n    }));\r\n    saveHistory();\r\n  };\r\n\r\n  const startDFS = async () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\r\n    if (isNaN(startNodeId) || !nodes.some((node) => node.id === startNodeId)) {\r\n      alert('Некоректний ID початкової вершини');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n    setVisitedStack([startNodeId]);\r\n    setCurrentNode(startNodeId);\r\n\r\n    while (visitedStack.length > 0 && !isPaused) {\r\n      const current = visitedStack.pop();\r\n      setCurrentNode(current);\r\n\r\n      setNodes((prev) =>\r\n        prev.map((node) =>\r\n          node.id === current ? { ...node, state: 'processing' } : node\r\n        )\r\n      );\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      const neighbors = adjacencyList[current] || [];\r\n      neighbors.forEach((neighbor) => {\r\n        if (\r\n          !nodes.find((node) => node.id === neighbor).state.includes('visited')\r\n        ) {\r\n          setVisitedStack((prev) => [...prev, neighbor]);\r\n        }\r\n      });\r\n\r\n      setNodes((prev) =>\r\n        prev.map((node) =>\r\n          node.id === current ? { ...node, state: 'visited' } : node\r\n        )\r\n      );\r\n\r\n      setCurrentNode(null);\r\n    }\r\n\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  const undo = () => {\r\n    if (history.length === 0) {\r\n      alert('Немає попередніх станів для відкату.');\r\n      return;\r\n    }\r\n\r\n    const previousState = history.pop();\r\n    setNodes(previousState.nodes);\r\n    setEdges(previousState.edges);\r\n    setAdjacencyList(previousState.adjacencyList);\r\n  };\r\n\r\n  const saveHistory = () => {\r\n    setHistory((prev) => [\r\n      ...prev,\r\n      { nodes: [...nodes], edges: [...edges], adjacencyList: { ...adjacencyList } },\r\n    ]);\r\n  };\r\n\r\n  const renderGraph = () => (\r\n    <svg width=\"800\" height=\"600\">\r\n      {edges.map((edge, index) => {\r\n        const fromNode = nodes.find((node) => node.id === edge.from);\r\n        const toNode = nodes.find((node) => node.id === edge.to);\r\n        if (!fromNode || !toNode) return null;\r\n        return (\r\n          <line\r\n            key={index}\r\n            x1={fromNode.x}\r\n            y1={fromNode.y}\r\n            x2={toNode.x}\r\n            y2={toNode.y}\r\n            stroke=\"black\"\r\n            markerEnd=\"url(#arrowhead)\"\r\n          />\r\n        );\r\n      })}\r\n      <defs>\r\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\r\n          <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n        </marker>\r\n      </defs>\r\n      {nodes.map((node) => (\r\n        <g key={node.id}>\r\n          <circle\r\n            cx={node.x}\r\n            cy={node.y}\r\n            r=\"20\"\r\n            fill={\r\n              node.state === 'unvisited'\r\n                ? 'gray'\r\n                : node.state === 'processing'\r\n                ? 'orange'\r\n                : 'black'\r\n            }\r\n          />\r\n          <text x={node.x} y={node.y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"15\">\r\n            {node.label}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Глибокого Пошуку (DFS)</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n      <div className=\"representation-controls\">\r\n        <button onClick={() => setRepresentation('matrix')}>Матриця Суміжності</button>\r\n        <button onClick={() => setRepresentation('list')}>Список Суміжності</button>\r\n        <button onClick={() => setRepresentation('edges')}>Список Ребер</button>\r\n      </div>\r\n      {representation === 'matrix' && <AdjacencyMatrix nodes={nodes} edges={edges} />}\r\n      {representation === 'list' && <AdjacencyList adjacencyList={adjacencyList} />}\r\n      {representation === 'edges' && <EdgeList edges={edges} />}\r\n      <div className=\"controls\">\r\n        <button onClick={addNode}>Додати Вершину</button>\r\n        <button onClick={deleteNode}>Видалити Вершину</button>\r\n        <button onClick={addEdge}>Додати Ребро</button>\r\n        <button onClick={deleteEdge}>Видалити Ребро</button>\r\n        <button onClick={startDFS}>Старт</button>\r\n        <button onClick={pauseDFS} disabled={!isRunning}>\r\n          {isPaused ? 'Продовжити' : 'Пауза'}\r\n        </button>\r\n        <button onClick={undo}>Назад</button>\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n      </div>\r\n      {currentNode && <p>Поточна вершина: V{currentNode}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}