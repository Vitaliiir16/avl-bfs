{"ast":null,"code":"const dfsAlgorithm = async (nodes, edges, startNodeId, setNodesState) => {\n  const visited = {};\n  const stack = [];\n  const nodeMap = nodes.reduce((map, node) => {\n    map[node.id] = {\n      ...node,\n      state: 'unvisited'\n    };\n    return map;\n  }, {});\n  stack.push(startNodeId);\n  while (stack.length > 0) {\n    const currentNodeId = stack.pop();\n    const currentNode = nodeMap[currentNodeId];\n    if (!visited[currentNodeId]) {\n      visited[currentNodeId] = true;\n      currentNode.state = 'processing';\n      setNodesState(Object.values(nodeMap));\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for animation\n\n      const neighbors = edges.filter(edge => edge.from === currentNodeId).map(edge => edge.to);\n      for (let neighborId of neighbors) {\n        if (!visited[neighborId]) {\n          stack.push(neighborId);\n        }\n      }\n      currentNode.state = 'completed';\n      setNodesState(Object.values(nodeMap));\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for animation\n    }\n  }\n};\nexport default dfsAlgorithm;","map":{"version":3,"names":["dfsAlgorithm","nodes","edges","startNodeId","setNodesState","visited","stack","nodeMap","reduce","map","node","id","state","push","length","currentNodeId","pop","currentNode","Object","values","Promise","resolve","setTimeout","neighbors","filter","edge","from","to","neighborId"],"sources":["D:/kr/src/components/Graph/dfsAlgorithm/dfsAlgorithm.js"],"sourcesContent":["const dfsAlgorithm = async (nodes, edges, startNodeId, setNodesState) => {\r\n  const visited = {};\r\n  const stack = [];\r\n  const nodeMap = nodes.reduce((map, node) => {\r\n    map[node.id] = { ...node, state: 'unvisited' };\r\n    return map;\r\n  }, {});\r\n\r\n  stack.push(startNodeId);\r\n\r\n  while (stack.length > 0) {\r\n    const currentNodeId = stack.pop();\r\n    const currentNode = nodeMap[currentNodeId];\r\n\r\n    if (!visited[currentNodeId]) {\r\n      visited[currentNodeId] = true;\r\n      currentNode.state = 'processing';\r\n      setNodesState(Object.values(nodeMap));\r\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // Delay for animation\r\n\r\n      const neighbors = edges\r\n        .filter((edge) => edge.from === currentNodeId)\r\n        .map((edge) => edge.to);\r\n\r\n      for (let neighborId of neighbors) {\r\n        if (!visited[neighborId]) {\r\n          stack.push(neighborId);\r\n        }\r\n      }\r\n\r\n      currentNode.state = 'completed';\r\n      setNodesState(Object.values(nodeMap));\r\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // Delay for animation\r\n    }\r\n  }\r\n};\r\n\r\nexport default dfsAlgorithm;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,aAAa,KAAK;EACvE,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,OAAO,GAAGN,KAAK,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IAC1CD,GAAG,CAACC,IAAI,CAACC,EAAE,CAAC,GAAG;MAAE,GAAGD,IAAI;MAAEE,KAAK,EAAE;IAAY,CAAC;IAC9C,OAAOH,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAENH,KAAK,CAACO,IAAI,CAACV,WAAW,CAAC;EAEvB,OAAOG,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,aAAa,GAAGT,KAAK,CAACU,GAAG,CAAC,CAAC;IACjC,MAAMC,WAAW,GAAGV,OAAO,CAACQ,aAAa,CAAC;IAE1C,IAAI,CAACV,OAAO,CAACU,aAAa,CAAC,EAAE;MAC3BV,OAAO,CAACU,aAAa,CAAC,GAAG,IAAI;MAC7BE,WAAW,CAACL,KAAK,GAAG,YAAY;MAChCR,aAAa,CAACc,MAAM,CAACC,MAAM,CAACZ,OAAO,CAAC,CAAC;MACrC,MAAM,IAAIa,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;MAE3D,MAAME,SAAS,GAAGrB,KAAK,CACpBsB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKX,aAAa,CAAC,CAC7CN,GAAG,CAAEgB,IAAI,IAAKA,IAAI,CAACE,EAAE,CAAC;MAEzB,KAAK,IAAIC,UAAU,IAAIL,SAAS,EAAE;QAChC,IAAI,CAAClB,OAAO,CAACuB,UAAU,CAAC,EAAE;UACxBtB,KAAK,CAACO,IAAI,CAACe,UAAU,CAAC;QACxB;MACF;MAEAX,WAAW,CAACL,KAAK,GAAG,WAAW;MAC/BR,aAAa,CAACc,MAAM,CAACC,MAAM,CAACZ,OAAO,CAAC,CAAC;MACrC,MAAM,IAAIa,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7D;EACF;AACF,CAAC;AAED,eAAerB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}