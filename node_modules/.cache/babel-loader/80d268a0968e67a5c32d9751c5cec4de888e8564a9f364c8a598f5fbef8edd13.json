{"ast":null,"code":"var _jsxFileName = \"D:\\\\dfs-rbt-visualization\\\\src\\\\components\\\\Graph\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Graph.css';\nimport AdjacencyMatrix from './AdjacencyMatrix';\nimport AdjacencyList from './AdjacencyList';\nimport EdgeList from './EdgeList';\nimport dfsAlgorithm from './dfsAlgorithm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [nodesState, setNodesState] = useState([]);\n  const [message, setMessage] = useState('');\n  const [representation, setRepresentation] = useState('matrix');\n  const [history, setHistory] = useState([]);\n\n  // Функція для збереження поточного стану в історію\n  const saveHistory = () => {\n    setHistory([...history, {\n      nodes: JSON.parse(JSON.stringify(nodes)),\n      edges: JSON.parse(JSON.stringify(edges))\n    }]);\n  };\n\n  // Додавання вершини\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const nodeId = nodes.length + 1;\n    const newNode = {\n      id: nodeId,\n      label: `V${nodeId}`,\n      x: Math.random() * 700 + 50,\n      y: Math.random() * 500 + 50,\n      state: 'unvisited'\n    };\n    saveHistory();\n    setNodes([...nodes, newNode]);\n  };\n\n  // Видалення вершини\n  const deleteNode = () => {\n    const nodeIdInput = prompt('Введіть ID вершини для видалення:');\n    const nodeId = parseInt(nodeIdInput);\n    if (isNaN(nodeId)) {\n      alert('Будь ласка, введіть коректний числовий ID вершини.');\n      return;\n    }\n    const nodeExists = nodes.some(node => node.id === nodeId);\n    if (!nodeExists) {\n      alert('Вершина з таким ID не знайдена.');\n      return;\n    }\n    saveHistory();\n    setNodes(nodes.filter(node => node.id !== nodeId));\n    setEdges(edges.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n  };\n\n  // Додавання ребра\n  const addEdge = (fromId, toId) => {\n    const fromNode = nodes.find(node => node.id === fromId);\n    const toNode = nodes.find(node => node.id === toId);\n    if (!fromNode || !toNode) {\n      alert('Вершина з таким ID не знайдена');\n      return;\n    }\n    if (edges.filter(edge => edge.from === fromId).length >= 14) {\n      alert('Максимальна кількість ребер з цієї вершини досягнута');\n      return;\n    }\n    const newEdge = {\n      from: fromId,\n      to: toId\n    };\n    saveHistory();\n    setEdges([...edges, newEdge]);\n  };\n\n  // Видалення ребра\n  const deleteEdge = () => {\n    const fromInput = prompt('З якої вершини видалити ребро (ID)?');\n    const toInput = prompt('До якої вершини видалити ребро (ID)?');\n    const from = parseInt(fromInput);\n    const to = parseInt(toInput);\n    if (isNaN(from) || isNaN(to)) {\n      alert('Будь ласка, введіть коректні числові значення ID вершин.');\n      return;\n    }\n    const edgeExists = edges.some(edge => edge.from === from && edge.to === to);\n    if (!edgeExists) {\n      alert('Ребро між цими вершинами не знайдено.');\n      return;\n    }\n    saveHistory();\n    setEdges(edges.filter(edge => !(edge.from === from && edge.to === to)));\n  };\n\n  // Запуск алгоритму DFS\n  const startDFS = async () => {\n    if (nodes.length === 0) {\n      alert('Граф порожній');\n      return;\n    }\n    const startNodeLabel = prompt('Введіть початкову вершину (наприклад, V1):');\n    const startNode = nodes.find(node => node.label === startNodeLabel);\n    if (!startNode) {\n      alert('Початкова вершина не знайдена');\n      return;\n    }\n    setIsRunning(true);\n    setMessage('Виконується алгоритм DFS...');\n    await dfsAlgorithm(nodes, edges, startNode.id, setNodesState);\n    setIsRunning(false);\n    setMessage('Алгоритм завершено');\n  };\n\n  // Відкат до попереднього стану\n  const undo = () => {\n    if (history.length === 0) {\n      alert('Немає попередніх станів для відкату.');\n      return;\n    }\n    const previousState = history[history.length - 1];\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    setHistory(history.slice(0, history.length - 1));\n  };\n  useEffect(() => {\n    if (nodesState.length > 0) {\n      setNodes(nodesState);\n    }\n  }, [nodesState]);\n\n  // Відображення графу\n  const renderGraph = () => {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"800\",\n      height: \"600\",\n      children: [edges.map((edge, index) => {\n        const fromNode = nodes.find(node => node.id === edge.from);\n        const toNode = nodes.find(node => node.id === edge.to);\n        if (fromNode && toNode) {\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromNode.x,\n            y1: fromNode.y,\n            x2: toNode.x,\n            y2: toNode.y,\n            stroke: \"black\",\n            markerEnd: \"url(#arrowhead)\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      }), /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrowhead\",\n          markerWidth: \"10\",\n          markerHeight: \"7\",\n          refX: \"10\",\n          refY: \"3.5\",\n          orient: \"auto\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"0 0, 10 3.5, 0 7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x,\n          cy: node.y,\n          r: \"20\",\n          fill: node.state === 'unvisited' ? 'gray' : node.state === 'processing' ? 'green' : 'black'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y + 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"15\",\n          children: node.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Функція для перемикання представлення\n  const handleRepresentationChange = type => {\n    setRepresentation(type);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0413\\u043B\\u0438\\u0431\\u043E\\u043A\\u043E\\u0433\\u043E \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"representation-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRepresentationChange('matrix'),\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRepresentationChange('list'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRepresentationChange('edges'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0420\\u0435\\u0431\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), representation === 'matrix' && /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 39\n    }, this), representation === 'list' && /*#__PURE__*/_jsxDEV(AdjacencyList, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 37\n    }, this), representation === 'edges' && /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const fromInput = prompt('З якої вершини (ID)?');\n          const toInput = prompt('До якої вершини (ID)?');\n          const from = parseInt(fromInput);\n          const to = parseInt(toInput);\n          if (isNaN(from) || isNaN(to)) {\n            alert('Будь ласка, введіть коректні числові значення ID вершин.');\n            return;\n          }\n          addEdge(from, to);\n        },\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteEdge,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        disabled: isRunning,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRunning(false),\n        disabled: !isRunning,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n_s(Graph, \"z5gFemz2QJCEuM6sI7X33s7/Tn4=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","Link","AdjacencyMatrix","AdjacencyList","EdgeList","dfsAlgorithm","jsxDEV","_jsxDEV","Graph","_s","nodes","setNodes","edges","setEdges","isRunning","setIsRunning","nodesState","setNodesState","message","setMessage","representation","setRepresentation","history","setHistory","saveHistory","JSON","parse","stringify","addNode","length","alert","nodeId","newNode","id","label","x","Math","random","y","state","deleteNode","nodeIdInput","prompt","parseInt","isNaN","nodeExists","some","node","filter","edge","from","to","addEdge","fromId","toId","fromNode","find","toNode","newEdge","deleteEdge","fromInput","toInput","edgeExists","startDFS","startNodeLabel","startNode","undo","previousState","slice","renderGraph","width","height","children","map","index","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","handleRepresentationChange","type","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/dfs-rbt-visualization/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Graph.css';\r\nimport AdjacencyMatrix from './AdjacencyMatrix';\r\nimport AdjacencyList from './AdjacencyList';\r\nimport EdgeList from './EdgeList';\r\nimport dfsAlgorithm from './dfsAlgorithm';\r\n\r\nfunction Graph() {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [nodesState, setNodesState] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [representation, setRepresentation] = useState('matrix');\r\n  const [history, setHistory] = useState([]);\r\n\r\n  // Функція для збереження поточного стану в історію\r\n  const saveHistory = () => {\r\n    setHistory([\r\n      ...history,\r\n      {\r\n        nodes: JSON.parse(JSON.stringify(nodes)),\r\n        edges: JSON.parse(JSON.stringify(edges)),\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // Додавання вершини\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n    const nodeId = nodes.length + 1;\r\n    const newNode = {\r\n      id: nodeId,\r\n      label: `V${nodeId}`,\r\n      x: Math.random() * 700 + 50,\r\n      y: Math.random() * 500 + 50,\r\n      state: 'unvisited',\r\n    };\r\n    saveHistory();\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  // Видалення вершини\r\n  const deleteNode = () => {\r\n    const nodeIdInput = prompt('Введіть ID вершини для видалення:');\r\n    const nodeId = parseInt(nodeIdInput);\r\n\r\n    if (isNaN(nodeId)) {\r\n      alert('Будь ласка, введіть коректний числовий ID вершини.');\r\n      return;\r\n    }\r\n\r\n    const nodeExists = nodes.some((node) => node.id === nodeId);\r\n\r\n    if (!nodeExists) {\r\n      alert('Вершина з таким ID не знайдена.');\r\n      return;\r\n    }\r\n\r\n    saveHistory();\r\n    setNodes(nodes.filter((node) => node.id !== nodeId));\r\n    setEdges(edges.filter((edge) => edge.from !== nodeId && edge.to !== nodeId));\r\n  };\r\n\r\n  // Додавання ребра\r\n  const addEdge = (fromId, toId) => {\r\n    const fromNode = nodes.find((node) => node.id === fromId);\r\n    const toNode = nodes.find((node) => node.id === toId);\r\n\r\n    if (!fromNode || !toNode) {\r\n      alert('Вершина з таким ID не знайдена');\r\n      return;\r\n    }\r\n\r\n    if (edges.filter((edge) => edge.from === fromId).length >= 14) {\r\n      alert('Максимальна кількість ребер з цієї вершини досягнута');\r\n      return;\r\n    }\r\n\r\n    const newEdge = { from: fromId, to: toId };\r\n    saveHistory();\r\n    setEdges([...edges, newEdge]);\r\n  };\r\n\r\n  // Видалення ребра\r\n  const deleteEdge = () => {\r\n    const fromInput = prompt('З якої вершини видалити ребро (ID)?');\r\n    const toInput = prompt('До якої вершини видалити ребро (ID)?');\r\n    const from = parseInt(fromInput);\r\n    const to = parseInt(toInput);\r\n\r\n    if (isNaN(from) || isNaN(to)) {\r\n      alert('Будь ласка, введіть коректні числові значення ID вершин.');\r\n      return;\r\n    }\r\n\r\n    const edgeExists = edges.some((edge) => edge.from === from && edge.to === to);\r\n\r\n    if (!edgeExists) {\r\n      alert('Ребро між цими вершинами не знайдено.');\r\n      return;\r\n    }\r\n\r\n    saveHistory();\r\n    setEdges(edges.filter((edge) => !(edge.from === from && edge.to === to)));\r\n  };\r\n\r\n  // Запуск алгоритму DFS\r\n  const startDFS = async () => {\r\n    if (nodes.length === 0) {\r\n      alert('Граф порожній');\r\n      return;\r\n    }\r\n    const startNodeLabel = prompt('Введіть початкову вершину (наприклад, V1):');\r\n    const startNode = nodes.find((node) => node.label === startNodeLabel);\r\n    if (!startNode) {\r\n      alert('Початкова вершина не знайдена');\r\n      return;\r\n    }\r\n    setIsRunning(true);\r\n    setMessage('Виконується алгоритм DFS...');\r\n    await dfsAlgorithm(nodes, edges, startNode.id, setNodesState);\r\n    setIsRunning(false);\r\n    setMessage('Алгоритм завершено');\r\n  };\r\n\r\n  // Відкат до попереднього стану\r\n  const undo = () => {\r\n    if (history.length === 0) {\r\n      alert('Немає попередніх станів для відкату.');\r\n      return;\r\n    }\r\n\r\n    const previousState = history[history.length - 1];\r\n    setNodes(previousState.nodes);\r\n    setEdges(previousState.edges);\r\n    setHistory(history.slice(0, history.length - 1));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (nodesState.length > 0) {\r\n      setNodes(nodesState);\r\n    }\r\n  }, [nodesState]);\r\n\r\n  // Відображення графу\r\n  const renderGraph = () => {\r\n    return (\r\n      <svg width=\"800\" height=\"600\">\r\n        {/* Ребра */}\r\n        {edges.map((edge, index) => {\r\n          const fromNode = nodes.find((node) => node.id === edge.from);\r\n          const toNode = nodes.find((node) => node.id === edge.to);\r\n          if (fromNode && toNode) {\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={fromNode.x}\r\n                y1={fromNode.y}\r\n                x2={toNode.x}\r\n                y2={toNode.y}\r\n                stroke=\"black\"\r\n                markerEnd=\"url(#arrowhead)\"\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n        <defs>\r\n          <marker\r\n            id=\"arrowhead\"\r\n            markerWidth=\"10\"\r\n            markerHeight=\"7\"\r\n            refX=\"10\"\r\n            refY=\"3.5\"\r\n            orient=\"auto\"\r\n          >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n          </marker>\r\n        </defs>\r\n        {/* Вершини */}\r\n        {nodes.map((node) => (\r\n          <g key={node.id}>\r\n            <circle\r\n              cx={node.x}\r\n              cy={node.y}\r\n              r=\"20\"\r\n              fill={\r\n                node.state === 'unvisited'\r\n                  ? 'gray'\r\n                  : node.state === 'processing'\r\n                  ? 'green'\r\n                  : 'black'\r\n              }\r\n            />\r\n            <text\r\n              x={node.x}\r\n              y={node.y + 5}\r\n              textAnchor=\"middle\"\r\n              fill=\"white\"\r\n              fontSize=\"15\"\r\n            >\r\n              {node.label}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </svg>\r\n    );\r\n  };\r\n\r\n  // Функція для перемикання представлення\r\n  const handleRepresentationChange = (type) => {\r\n    setRepresentation(type);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Глибокого Пошуку (DFS)</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n\r\n      {/* Кнопки для перемикання представлень */}\r\n      <div className=\"representation-controls\">\r\n        <button onClick={() => handleRepresentationChange('matrix')}>\r\n          Матриця Суміжності\r\n        </button>\r\n        <button onClick={() => handleRepresentationChange('list')}>\r\n          Список Суміжності\r\n        </button>\r\n        <button onClick={() => handleRepresentationChange('edges')}>\r\n          Список Ребер\r\n        </button>\r\n      </div>\r\n\r\n      {/* Відображення вибраного представлення */}\r\n      {representation === 'matrix' && <AdjacencyMatrix nodes={nodes} edges={edges} />}\r\n      {representation === 'list' && <AdjacencyList nodes={nodes} edges={edges} />}\r\n      {representation === 'edges' && <EdgeList edges={edges} />}\r\n\r\n      {/* Кнопки управління */}\r\n      <div className=\"controls\">\r\n        <button onClick={addNode}>Додати Вершину</button>\r\n        <button onClick={deleteNode}>Видалити Вершину</button>\r\n        <button\r\n          onClick={() => {\r\n            const fromInput = prompt('З якої вершини (ID)?');\r\n            const toInput = prompt('До якої вершини (ID)?');\r\n            const from = parseInt(fromInput);\r\n            const to = parseInt(toInput);\r\n\r\n            if (isNaN(from) || isNaN(to)) {\r\n              alert('Будь ласка, введіть коректні числові значення ID вершин.');\r\n              return;\r\n            }\r\n\r\n            addEdge(from, to);\r\n          }}\r\n        >\r\n          Додати Ребро\r\n        </button>\r\n        <button onClick={deleteEdge}>Видалити Ребро</button>\r\n        <button onClick={startDFS} disabled={isRunning}>\r\n          Start\r\n        </button>\r\n        <button onClick={() => setIsRunning(false)} disabled={!isRunning}>\r\n          Stop\r\n        </button>\r\n        <button onClick={undo}>Назад</button>\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n      </div>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}