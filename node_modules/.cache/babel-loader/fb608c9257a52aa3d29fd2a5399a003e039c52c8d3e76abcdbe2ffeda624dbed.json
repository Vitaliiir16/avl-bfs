{"ast":null,"code":"// Визначаємо NIL як об'єкт\nconst NIL = {};\n\n// Ініціалізуємо NIL\nNIL.id = 'NIL';\nNIL.value = null;\nNIL.color = 'black';\nNIL.left = NIL;\nNIL.right = NIL;\nNIL.parent = NIL;\n\n// Клас Node\nclass Node {\n  constructor(value) {\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\n    this.value = value;\n    this.color = 'red'; // Нові вузли завжди червоні\n    this.left = NIL;\n    this.right = NIL;\n    this.parent = NIL;\n  }\n}\n\n// Функція вставки вузла\nexport function insertNode(root, value) {\n  const newNode = new Node(value);\n  let y = NIL;\n  let x = root;\n  while (x !== NIL) {\n    y = x;\n    if (newNode.value < x.value) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  newNode.parent = y;\n  if (y === NIL) {\n    root = newNode;\n  } else if (newNode.value < y.value) {\n    y.left = newNode;\n  } else {\n    y.right = newNode;\n  }\n  root = fixInsert(root, newNode);\n  return root;\n}\n\n// Функція для балансування після вставки\nfunction fixInsert(root, k) {\n  while (k.parent.color === 'red') {\n    if (k.parent === k.parent.parent.left) {\n      let uncle = k.parent.parent.right;\n      if (uncle.color === 'red') {\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.right) {\n          k = k.parent;\n          root = leftRotate(root, k);\n        }\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = rightRotate(root, k.parent.parent);\n      }\n    } else {\n      let uncle = k.parent.parent.left;\n      if (uncle.color === 'red') {\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.left) {\n          k = k.parent;\n          root = rightRotate(root, k);\n        }\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = leftRotate(root, k.parent.parent);\n      }\n    }\n    if (k.parent === NIL) {\n      break;\n    }\n  }\n  root.color = 'black';\n  return root;\n}\n\n// Функція лівого повороту\nfunction leftRotate(root, x) {\n  let y = x.right;\n  x.right = y.left;\n  if (y.left !== NIL) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === NIL) {\n    root = y;\n  } else if (x === x.parent.left) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n  return root;\n}\n\n// Функція правого повороту\nfunction rightRotate(root, y) {\n  let x = y.left;\n  y.left = x.right;\n  if (x.right !== NIL) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  if (y.parent === NIL) {\n    root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n  x.right = y;\n  y.parent = x;\n  return root;\n}\n\n// Функція видалення вузла\nexport function deleteNode(root, value) {\n  let z = searchNode(root, value);\n  if (z === NIL) return root;\n  let y = z;\n  let yOriginalColor = y.color;\n  let x;\n  if (z.left === NIL) {\n    x = z.right;\n    root = transplant(root, z, z.right);\n  } else if (z.right === NIL) {\n    x = z.left;\n    root = transplant(root, z, z.left);\n  } else {\n    y = treeMinimum(z.right);\n    yOriginalColor = y.color;\n    x = y.right;\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      root = transplant(root, y, y.right);\n      y.right = z.right;\n      y.right.parent = y;\n    }\n    root = transplant(root, z, y);\n    y.left = z.left;\n    y.left.parent = y;\n    y.color = z.color;\n  }\n  if (yOriginalColor === 'black') {\n    root = fixDelete(root, x);\n  }\n  return root;\n}\n\n// Функція для заміни одного піддерева іншим\nfunction transplant(root, u, v) {\n  if (u.parent === NIL) {\n    root = v;\n  } else if (u === u.parent.left) {\n    u.parent.left = v;\n  } else {\n    u.parent.right = v;\n  }\n  v.parent = u.parent;\n  return root;\n}\n\n// Функція для балансування після видалення\nfunction fixDelete(root, x) {\n  while (x !== root && x.color === 'black') {\n    if (x === x.parent.left) {\n      let w = x.parent.right;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = leftRotate(root, x.parent);\n        w = x.parent.right;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.right.color === 'black') {\n          w.left.color = 'black';\n          w.color = 'red';\n          root = rightRotate(root, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.right.color = 'black';\n        root = leftRotate(root, x.parent);\n        x = root;\n      }\n    } else {\n      let w = x.parent.left;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = rightRotate(root, x.parent);\n        w = x.parent.left;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.left.color === 'black') {\n          w.right.color = 'black';\n          w.color = 'red';\n          root = leftRotate(root, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.left.color = 'black';\n        root = rightRotate(root, x.parent);\n        x = root;\n      }\n    }\n  }\n  x.color = 'black';\n  return root;\n}\n\n// Функція для пошуку мінімального вузла\nfunction treeMinimum(x) {\n  while (x.left !== NIL) {\n    x = x.left;\n  }\n  return x;\n}\n\n// Функція пошуку вузла\nexport function searchNode(root, value) {\n  let current = root;\n  while (current !== NIL) {\n    if (value === current.value) {\n      return current;\n    } else if (value < current.value) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n  return NIL;\n}\n\n// Експортуємо NIL\nexport { NIL };","map":{"version":3,"names":["NIL","id","value","color","left","right","parent","Node","constructor","Math","random","toString","substr","insertNode","root","newNode","y","x","fixInsert","k","uncle","leftRotate","rightRotate","deleteNode","z","searchNode","yOriginalColor","transplant","treeMinimum","fixDelete","u","v","w","current"],"sources":["D:/dfs-rbt-visualization/src/components/RedBlackTree/rbtOperations.js"],"sourcesContent":["// Визначаємо NIL як об'єкт\r\nconst NIL = {};\r\n\r\n// Ініціалізуємо NIL\r\nNIL.id = 'NIL';\r\nNIL.value = null;\r\nNIL.color = 'black';\r\nNIL.left = NIL;\r\nNIL.right = NIL;\r\nNIL.parent = NIL;\r\n\r\n// Клас Node\r\nclass Node {\r\n  constructor(value) {\r\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\r\n    this.value = value;\r\n    this.color = 'red'; // Нові вузли завжди червоні\r\n    this.left = NIL;\r\n    this.right = NIL;\r\n    this.parent = NIL;\r\n  }\r\n}\r\n\r\n// Функція вставки вузла\r\nexport function insertNode(root, value) {\r\n  const newNode = new Node(value);\r\n\r\n  let y = NIL;\r\n  let x = root;\r\n\r\n  while (x !== NIL) {\r\n    y = x;\r\n    if (newNode.value < x.value) {\r\n      x = x.left;\r\n    } else {\r\n      x = x.right;\r\n    }\r\n  }\r\n\r\n  newNode.parent = y;\r\n\r\n  if (y === NIL) {\r\n    root = newNode;\r\n  } else if (newNode.value < y.value) {\r\n    y.left = newNode;\r\n  } else {\r\n    y.right = newNode;\r\n  }\r\n\r\n  root = fixInsert(root, newNode);\r\n  return root;\r\n}\r\n\r\n// Функція для балансування після вставки\r\nfunction fixInsert(root, k) {\r\n  while (k.parent.color === 'red') {\r\n    if (k.parent === k.parent.parent.left) {\r\n      let uncle = k.parent.parent.right;\r\n      if (uncle.color === 'red') {\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.right) {\r\n          k = k.parent;\r\n          root = leftRotate(root, k);\r\n        }\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = rightRotate(root, k.parent.parent);\r\n      }\r\n    } else {\r\n      let uncle = k.parent.parent.left;\r\n      if (uncle.color === 'red') {\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.left) {\r\n          k = k.parent;\r\n          root = rightRotate(root, k);\r\n        }\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = leftRotate(root, k.parent.parent);\r\n      }\r\n    }\r\n\r\n    if (k.parent === NIL) {\r\n      break;\r\n    }\r\n  }\r\n  root.color = 'black';\r\n  return root;\r\n}\r\n\r\n// Функція лівого повороту\r\nfunction leftRotate(root, x) {\r\n  let y = x.right;\r\n  x.right = y.left;\r\n  if (y.left !== NIL) {\r\n    y.left.parent = x;\r\n  }\r\n  y.parent = x.parent;\r\n  if (x.parent === NIL) {\r\n    root = y;\r\n  } else if (x === x.parent.left) {\r\n    x.parent.left = y;\r\n  } else {\r\n    x.parent.right = y;\r\n  }\r\n  y.left = x;\r\n  x.parent = y;\r\n  return root;\r\n}\r\n\r\n// Функція правого повороту\r\nfunction rightRotate(root, y) {\r\n  let x = y.left;\r\n  y.left = x.right;\r\n  if (x.right !== NIL) {\r\n    x.right.parent = y;\r\n  }\r\n  x.parent = y.parent;\r\n  if (y.parent === NIL) {\r\n    root = x;\r\n  } else if (y === y.parent.right) {\r\n    y.parent.right = x;\r\n  } else {\r\n    y.parent.left = x;\r\n  }\r\n  x.right = y;\r\n  y.parent = x;\r\n  return root;\r\n}\r\n\r\n// Функція видалення вузла\r\nexport function deleteNode(root, value) {\r\n  let z = searchNode(root, value);\r\n  if (z === NIL) return root;\r\n\r\n  let y = z;\r\n  let yOriginalColor = y.color;\r\n  let x;\r\n\r\n  if (z.left === NIL) {\r\n    x = z.right;\r\n    root = transplant(root, z, z.right);\r\n  } else if (z.right === NIL) {\r\n    x = z.left;\r\n    root = transplant(root, z, z.left);\r\n  } else {\r\n    y = treeMinimum(z.right);\r\n    yOriginalColor = y.color;\r\n    x = y.right;\r\n    if (y.parent === z) {\r\n      x.parent = y;\r\n    } else {\r\n      root = transplant(root, y, y.right);\r\n      y.right = z.right;\r\n      y.right.parent = y;\r\n    }\r\n    root = transplant(root, z, y);\r\n    y.left = z.left;\r\n    y.left.parent = y;\r\n    y.color = z.color;\r\n  }\r\n\r\n  if (yOriginalColor === 'black') {\r\n    root = fixDelete(root, x);\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\n// Функція для заміни одного піддерева іншим\r\nfunction transplant(root, u, v) {\r\n  if (u.parent === NIL) {\r\n    root = v;\r\n  } else if (u === u.parent.left) {\r\n    u.parent.left = v;\r\n  } else {\r\n    u.parent.right = v;\r\n  }\r\n  v.parent = u.parent;\r\n  return root;\r\n}\r\n\r\n// Функція для балансування після видалення\r\nfunction fixDelete(root, x) {\r\n  while (x !== root && x.color === 'black') {\r\n    if (x === x.parent.left) {\r\n      let w = x.parent.right;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = leftRotate(root, x.parent);\r\n        w = x.parent.right;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.right.color === 'black') {\r\n          w.left.color = 'black';\r\n          w.color = 'red';\r\n          root = rightRotate(root, w);\r\n          w = x.parent.right;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.right.color = 'black';\r\n        root = leftRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    } else {\r\n      let w = x.parent.left;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = rightRotate(root, x.parent);\r\n        w = x.parent.left;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.left.color === 'black') {\r\n          w.right.color = 'black';\r\n          w.color = 'red';\r\n          root = leftRotate(root, w);\r\n          w = x.parent.left;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.left.color = 'black';\r\n        root = rightRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    }\r\n  }\r\n  x.color = 'black';\r\n  return root;\r\n}\r\n\r\n// Функція для пошуку мінімального вузла\r\nfunction treeMinimum(x) {\r\n  while (x.left !== NIL) {\r\n    x = x.left;\r\n  }\r\n  return x;\r\n}\r\n\r\n// Функція пошуку вузла\r\nexport function searchNode(root, value) {\r\n  let current = root;\r\n  while (current !== NIL) {\r\n    if (value === current.value) {\r\n      return current;\r\n    } else if (value < current.value) {\r\n      current = current.left;\r\n    } else {\r\n      current = current.right;\r\n    }\r\n  }\r\n  return NIL;\r\n}\r\n\r\n// Експортуємо NIL\r\nexport { NIL };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}