{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\n// src/components/Graph/Graph.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\nimport EdgeList from './EdgeList/EdgeList';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [stepHistory, setStepHistory] = useState([]);\n  const [representation, setRepresentation] = useState('matrix');\n  const [dfsState, setDfsState] = useState(null);\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 200,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 400,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 600,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 400,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 600,\n      y: 300,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 3,\n      to: 4\n    }, {\n      from: 4,\n      to: 5\n    }, {\n      from: 5,\n      to: 6\n    }];\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const newNodeId = nodes.length + 1;\n    const rows = Math.ceil(newNodeId / 3);\n    const newX = 200 + 100 * newNodeId;\n    const newY = 70 + 100 * newNodeId;\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: newX,\n      y: newY,\n      state: 'unvisited'\n    };\n    setNodes(prev => [...prev, newNode]);\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.some(node => node.id === nodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setNodes(prev => prev.filter(node => node.id !== nodeId));\n    setEdges(prev => prev.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !nodes.some(node => node.id === fromId) || !nodes.some(node => node.id === toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setEdges(prev => [...prev, {\n      from: fromId,\n      to: toId\n    }]);\n  };\n  const deleteEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !edges.some(edge => edge.from === fromId && edge.to === toId)) {\n      alert('Ребро не знайдено');\n      return;\n    }\n    setEdges(prev => prev.filter(edge => !(edge.from === fromId && edge.to === toId)));\n  };\n  const startDFS = () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    const endNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\n    if (isNaN(startNodeId) || isNaN(endNodeId) || !nodes.some(node => node.id === startNodeId) || !nodes.some(node => node.id === endNodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setIsRunning(true);\n    setIsPaused(false);\n    setTargetNode(endNodeId);\n    const visited = new Set();\n    const stack = [startNodeId];\n    setStepHistory([]);\n    setDfsState({\n      stack,\n      visited,\n      currentNode: null\n    });\n  };\n  const advanceDFS = useCallback(async () => {\n    if (!dfsState || isPaused || !isRunning) return;\n    let {\n      stack,\n      visited\n    } = dfsState;\n    if (stack.length === 0) {\n      // DFS complete\n      setIsRunning(false);\n      setCurrentNode(null);\n      return;\n    }\n    const current = stack.pop();\n    setCurrentNode(current);\n    if (current === targetNode) {\n      // Found target node\n      setNodes(prev => prev.map(node => node.id === current ? {\n        ...node,\n        state: 'target'\n      } : node));\n      alert(`Знайдено кінцеву вершину V${targetNode}`);\n      setIsRunning(false);\n      setCurrentNode(null);\n      return;\n    }\n\n    // Set node to 'processing'\n    setNodes(prev => prev.map(node => node.id === current ? {\n      ...node,\n      state: 'processing'\n    } : node));\n\n    // Wait 2 seconds\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Mark node as 'visited'\n    setNodes(prev => prev.map(node => node.id === current ? {\n      ...node,\n      state: 'visited'\n    } : node));\n\n    // Add node to visited set\n    visited = new Set(visited);\n    visited.add(current);\n\n    // Add neighbors to stack\n    const neighbors = edges.filter(edge => edge.from === current && !visited.has(edge.to)).map(edge => edge.to);\n    neighbors.forEach(neighbor => {\n      if (!visited.has(neighbor)) {\n        stack.push(neighbor);\n      }\n    });\n    setStepHistory(prev => [...prev, current]);\n\n    // Update dfsState\n    setDfsState({\n      stack,\n      visited,\n      currentNode: current\n    });\n  }, [dfsState, isPaused, isRunning, edges, targetNode]);\n  useEffect(() => {\n    if (isRunning && !isPaused && dfsState) {\n      advanceDFS();\n    }\n  }, [dfsState, isRunning, isPaused, advanceDFS]);\n  const pauseDFS = () => {\n    setIsPaused(prevPaused => !prevPaused);\n  };\n  const undoDFS = () => {\n    if (stepHistory.length === 0) {\n      alert('Немає попередніх кроків для відкату.');\n      return;\n    }\n    const newHistory = [...stepHistory];\n    const lastVisitedNode = newHistory.pop();\n    const previousNode = newHistory[newHistory.length - 1] || null;\n\n    // Update the nodes\n    setNodes(prev => prev.map(node => {\n      if (node.id === lastVisitedNode) return {\n        ...node,\n        state: 'unvisited'\n      };\n      if (node.id === previousNode) return {\n        ...node,\n        state: 'processing'\n      };\n      return node;\n    }));\n    setCurrentNode(previousNode);\n\n    // Update dfsState\n    setDfsState(prevState => {\n      const {\n        stack,\n        visited\n      } = prevState;\n      const newVisited = new Set(visited);\n      newVisited.delete(lastVisitedNode);\n      const newStack = [...stack, lastVisitedNode];\n      return {\n        ...prevState,\n        stack: newStack,\n        visited: newVisited,\n        currentNode: previousNode\n      };\n    });\n    setStepHistory(newHistory);\n  };\n  const resetGraph = () => {\n    setNodes(prev => prev.map(node => ({\n      ...node,\n      state: 'unvisited'\n    })));\n    setStepHistory([]);\n    setCurrentNode(null);\n    setTargetNode(null);\n    setIsRunning(false);\n    setIsPaused(false);\n    setDfsState(null);\n  };\n  const renderGraph = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"800\",\n    height: \"600\",\n    children: [edges.map((edge, index) => {\n      const fromNode = nodes.find(node => node.id === edge.from);\n      const toNode = nodes.find(node => node.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: fromNode.x,\n        y1: fromNode.y,\n        x2: toNode.x,\n        y2: toNode.y,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"10\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: node.id === targetNode ? 'green' : node.state === 'unvisited' ? 'gray' : node.state === 'processing' ? 'orange' : node.state === 'visited' ? 'black' : 'gray'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"15\",\n        children: node.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 \\u0432 \\u0413\\u043B\\u0438\\u0431\\u0438\\u043D\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEdge,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteEdge,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseDFS,\n        disabled: !isRunning,\n        children: isPaused ? 'Продовжити' : 'Пауза'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undoDFS,\n        disabled: !isRunning,\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGraph,\n        children: \"\\u0417\\u0430\\u0431\\u0443\\u0442\\u0438 \\u043F\\u043E\\u0448\\u0443\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), currentNode && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u041F\\u043E\\u0442\\u043E\\u0447\\u043D\\u0430 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043D\\u0430: V\", currentNode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"representation-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('matrix'),\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('edges'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0420\\u0435\\u0431\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), representation === 'matrix' && /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this), representation === 'edges' && /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"NUYRmx/VKxqk3zZyRpRFto7RZDk=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Link","AdjacencyMatrix","EdgeList","jsxDEV","_jsxDEV","Graph","_s","nodes","setNodes","edges","setEdges","isRunning","setIsRunning","isPaused","setIsPaused","currentNode","setCurrentNode","targetNode","setTargetNode","stepHistory","setStepHistory","representation","setRepresentation","dfsState","setDfsState","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","addNode","length","alert","newNodeId","rows","Math","ceil","newX","newY","newNode","prev","deleteNode","nodeId","parseInt","prompt","isNaN","some","node","filter","edge","addEdge","fromId","toId","deleteEdge","startDFS","startNodeId","endNodeId","visited","Set","stack","advanceDFS","current","pop","map","Promise","resolve","setTimeout","add","neighbors","has","forEach","neighbor","push","pauseDFS","prevPaused","undoDFS","newHistory","lastVisitedNode","previousNode","prevState","newVisited","delete","newStack","resetGraph","renderGraph","width","height","children","index","fromNode","find","toNode","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["// src/components/Graph/Graph.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\r\nimport EdgeList from './EdgeList/EdgeList';\r\nimport './Graph.css';\r\n\r\nconst Graph = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [targetNode, setTargetNode] = useState(null);\r\n  const [stepHistory, setStepHistory] = useState([]);\r\n  const [representation, setRepresentation] = useState('matrix');\r\n  const [dfsState, setDfsState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 200, y: 150, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 400, y: 150, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 600, y: 150, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 300, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 400, y: 300, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 600, y: 300, state: 'unvisited' },\r\n    ];\r\n\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 2, to: 3 },\r\n      { from: 3, to: 4 },\r\n      { from: 4, to: 5 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n  };\r\n\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n\r\n    const newNodeId = nodes.length + 1;\r\n    const rows = Math.ceil(newNodeId / 3);\r\n    const newX = 200 + 100 * newNodeId;\r\n    const newY = 70 + 100 * newNodeId;\r\n\r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: newX,\r\n      y: newY,\r\n      state: 'unvisited',\r\n    };\r\n\r\n    setNodes((prev) => [...prev, newNode]);\r\n  };\r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.some((node) => node.id === nodeId)) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setNodes((prev) => prev.filter((node) => node.id !== nodeId));\r\n    setEdges((prev) => prev.filter((edge) => edge.from !== nodeId && edge.to !== nodeId));\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !nodes.some((node) => node.id === fromId) ||\r\n      !nodes.some((node) => node.id === toId)\r\n    ) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) => [...prev, { from: fromId, to: toId }]);\r\n  };\r\n\r\n  const deleteEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\r\n\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !edges.some((edge) => edge.from === fromId && edge.to === toId)\r\n    ) {\r\n      alert('Ребро не знайдено');\r\n      return;\r\n    }\r\n\r\n    setEdges((prev) => prev.filter((edge) => !(edge.from === fromId && edge.to === toId)));\r\n  };\r\n\r\n  const startDFS = () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\r\n    const endNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\r\n\r\n    if (\r\n      isNaN(startNodeId) ||\r\n      isNaN(endNodeId) ||\r\n      !nodes.some((node) => node.id === startNodeId) ||\r\n      !nodes.some((node) => node.id === endNodeId)\r\n    ) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n    setTargetNode(endNodeId);\r\n\r\n    const visited = new Set();\r\n    const stack = [startNodeId];\r\n\r\n    setStepHistory([]);\r\n    setDfsState({\r\n      stack,\r\n      visited,\r\n      currentNode: null,\r\n    });\r\n  };\r\n\r\n  const advanceDFS = useCallback(async () => {\r\n    if (!dfsState || isPaused || !isRunning) return;\r\n\r\n    let { stack, visited } = dfsState;\r\n\r\n    if (stack.length === 0) {\r\n      // DFS complete\r\n      setIsRunning(false);\r\n      setCurrentNode(null);\r\n      return;\r\n    }\r\n\r\n    const current = stack.pop();\r\n\r\n    setCurrentNode(current);\r\n\r\n    if (current === targetNode) {\r\n      // Found target node\r\n      setNodes((prev) =>\r\n        prev.map((node) =>\r\n          node.id === current ? { ...node, state: 'target' } : node\r\n        )\r\n      );\r\n      alert(`Знайдено кінцеву вершину V${targetNode}`);\r\n      setIsRunning(false);\r\n      setCurrentNode(null);\r\n      return;\r\n    }\r\n\r\n    // Set node to 'processing'\r\n    setNodes((prev) =>\r\n      prev.map((node) =>\r\n        node.id === current ? { ...node, state: 'processing' } : node\r\n      )\r\n    );\r\n\r\n    // Wait 2 seconds\r\n    await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n    // Mark node as 'visited'\r\n    setNodes((prev) =>\r\n      prev.map((node) =>\r\n        node.id === current ? { ...node, state: 'visited' } : node\r\n      )\r\n    );\r\n\r\n    // Add node to visited set\r\n    visited = new Set(visited);\r\n    visited.add(current);\r\n\r\n    // Add neighbors to stack\r\n    const neighbors = edges\r\n      .filter((edge) => edge.from === current && !visited.has(edge.to))\r\n      .map((edge) => edge.to);\r\n\r\n    neighbors.forEach((neighbor) => {\r\n      if (!visited.has(neighbor)) {\r\n        stack.push(neighbor);\r\n      }\r\n    });\r\n\r\n    setStepHistory((prev) => [...prev, current]);\r\n\r\n    // Update dfsState\r\n    setDfsState({\r\n      stack,\r\n      visited,\r\n      currentNode: current,\r\n    });\r\n  }, [dfsState, isPaused, isRunning, edges, targetNode]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused && dfsState) {\r\n      advanceDFS();\r\n    }\r\n  }, [dfsState, isRunning, isPaused, advanceDFS]);\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused((prevPaused) => !prevPaused);\r\n  };\r\n\r\n  const undoDFS = () => {\r\n    if (stepHistory.length === 0) {\r\n      alert('Немає попередніх кроків для відкату.');\r\n      return;\r\n    }\r\n\r\n    const newHistory = [...stepHistory];\r\n    const lastVisitedNode = newHistory.pop();\r\n    const previousNode = newHistory[newHistory.length - 1] || null;\r\n\r\n    // Update the nodes\r\n    setNodes((prev) =>\r\n      prev.map((node) => {\r\n        if (node.id === lastVisitedNode) return { ...node, state: 'unvisited' };\r\n        if (node.id === previousNode) return { ...node, state: 'processing' };\r\n        return node;\r\n      })\r\n    );\r\n\r\n    setCurrentNode(previousNode);\r\n\r\n    // Update dfsState\r\n    setDfsState((prevState) => {\r\n      const { stack, visited } = prevState;\r\n\r\n      const newVisited = new Set(visited);\r\n      newVisited.delete(lastVisitedNode);\r\n\r\n      const newStack = [...stack, lastVisitedNode];\r\n\r\n      return {\r\n        ...prevState,\r\n        stack: newStack,\r\n        visited: newVisited,\r\n        currentNode: previousNode,\r\n      };\r\n    });\r\n\r\n    setStepHistory(newHistory);\r\n  };\r\n\r\n  const resetGraph = () => {\r\n    setNodes((prev) =>\r\n      prev.map((node) => ({\r\n        ...node,\r\n        state: 'unvisited',\r\n      }))\r\n    );\r\n    setStepHistory([]);\r\n    setCurrentNode(null);\r\n    setTargetNode(null);\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n    setDfsState(null);\r\n  };\r\n\r\n  const renderGraph = () => (\r\n    <svg width=\"800\" height=\"600\">\r\n      {edges.map((edge, index) => {\r\n        const fromNode = nodes.find((node) => node.id === edge.from);\r\n        const toNode = nodes.find((node) => node.id === edge.to);\r\n        if (!fromNode || !toNode) return null;\r\n        return (\r\n          <line\r\n            key={index}\r\n            x1={fromNode.x}\r\n            y1={fromNode.y}\r\n            x2={toNode.x}\r\n            y2={toNode.y}\r\n            stroke=\"black\"\r\n            markerEnd=\"url(#arrowhead)\"\r\n          />\r\n        );\r\n      })}\r\n      <defs>\r\n        <marker\r\n          id=\"arrowhead\"\r\n          markerWidth=\"10\"\r\n          markerHeight=\"7\"\r\n          refX=\"10\"\r\n          refY=\"3.5\"\r\n          orient=\"auto\"\r\n        >\r\n          <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n        </marker>\r\n      </defs>\r\n      {nodes.map((node) => (\r\n        <g key={node.id}>\r\n          <circle\r\n            cx={node.x}\r\n            cy={node.y}\r\n            r=\"20\"\r\n            fill={\r\n              node.id === targetNode\r\n                ? 'green'\r\n                : node.state === 'unvisited'\r\n                ? 'gray'\r\n                : node.state === 'processing'\r\n                ? 'orange'\r\n                : node.state === 'visited'\r\n                ? 'black'\r\n                : 'gray'\r\n            }\r\n          />\r\n          <text\r\n            x={node.x}\r\n            y={node.y + 5}\r\n            textAnchor=\"middle\"\r\n            fill=\"white\"\r\n            fontSize=\"15\"\r\n          >\r\n            {node.label}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Пошуку в Глибину (DFS)</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n      <div className=\"controls\">\r\n        <button onClick={addNode}>Додати Вершину</button>\r\n        <button onClick={deleteNode}>Видалити Вершину</button>\r\n        <button onClick={addEdge}>Додати Ребро</button>\r\n        <button onClick={deleteEdge}>Видалити Ребро</button>\r\n        <button onClick={startDFS}>Старт</button>\r\n        <button onClick={pauseDFS} disabled={!isRunning}>\r\n          {isPaused ? 'Продовжити' : 'Пауза'}\r\n        </button>\r\n        <button onClick={undoDFS} disabled={!isRunning}>\r\n          Назад\r\n        </button>\r\n        <button onClick={resetGraph}>Забути пошук</button>\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n      </div>\r\n      {currentNode && <p>Поточна вершина: V{currentNode}</p>}\r\n      <div className=\"representation-controls\">\r\n        <button onClick={() => setRepresentation('matrix')}>\r\n          Матриця Суміжності\r\n        </button>\r\n        <button onClick={() => setRepresentation('edges')}>\r\n          Список Ребер\r\n        </button>\r\n      </div>\r\n      {representation === 'matrix' && (\r\n        <AdjacencyMatrix nodes={nodes} edges={edges} />\r\n      )}\r\n      {representation === 'edges' && <EdgeList edges={edges} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}