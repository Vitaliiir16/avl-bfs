{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\nimport EdgeList from './EdgeList/EdgeList';\nimport './Graph.css';\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [adjacencyList, setAdjacencyList] = useState({});\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [queue, setQueue] = useState([]); // Черга для обробки вершин у DFS\n  const [currentNode, setCurrentNode] = useState(null); // Поточна оброблювана вершина\n  const [representation, setRepresentation] = useState('matrix');\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 300,\n      y: 50,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 250,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 350,\n      y: 150,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 250,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 400,\n      y: 250,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 300,\n      y: 350,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 1,\n      to: 3\n    }, {\n      from: 2,\n      to: 4\n    }, {\n      from: 3,\n      to: 5\n    }, {\n      from: 4,\n      to: 6\n    }, {\n      from: 5,\n      to: 6\n    }];\n    const initialAdjacencyList = {\n      1: [2, 3],\n      2: [4],\n      3: [5],\n      4: [6],\n      5: [6],\n      6: []\n    };\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n    setAdjacencyList(initialAdjacencyList);\n  };\n  const startDFS = async () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    if (isNaN(startNodeId) || !nodes.some(node => node.id === startNodeId)) {\n      alert('Некоректний ID початкової вершини');\n      return;\n    }\n    setIsRunning(true);\n    setIsPaused(false);\n    setQueue([startNodeId]);\n\n    // Виконання алгоритму DFS з візуалізацією\n    while (queue.length > 0 && !isPaused) {\n      const current = queue.shift();\n      setCurrentNode(current);\n\n      // Оновлення стану вершин\n      setNodes(prevNodes => prevNodes.map(node => node.id === current ? {\n        ...node,\n        state: 'processing'\n      } : node));\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Затримка для візуалізації\n\n      // Додавання сусідів у чергу\n      const neighbors = adjacencyList[current] || [];\n      for (const neighbor of neighbors) {\n        if (!nodes.find(node => node.id === neighbor).state.includes('visited')) {\n          setQueue(prevQueue => [...prevQueue, neighbor]);\n        }\n      }\n\n      // Завершення обробки поточної вершини\n      setNodes(prevNodes => prevNodes.map(node => node.id === current ? {\n        ...node,\n        state: 'visited'\n      } : node));\n      setCurrentNode(null); // Скидаємо поточну вершину\n    }\n    setIsRunning(false);\n  };\n  const pauseDFS = () => {\n    setIsPaused(!isPaused);\n  };\n  const renderGraph = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"800\",\n    height: \"600\",\n    children: [edges.map((edge, index) => {\n      const fromNode = nodes.find(node => node.id === edge.from);\n      const toNode = nodes.find(node => node.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: fromNode.x,\n        y1: fromNode.y,\n        x2: toNode.x,\n        y2: toNode.y,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"10\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: node.state === 'unvisited' ? 'gray' : node.state === 'processing' ? 'orange' : 'black'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"15\",\n        children: node.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0413\\u0440\\u0430\\u0444\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"representation-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('matrix'),\n        children: \"\\u041C\\u0430\\u0442\\u0440\\u0438\\u0446\\u044F \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('list'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0421\\u0443\\u043C\\u0456\\u0436\\u043D\\u043E\\u0441\\u0442\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setRepresentation('edges'),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0420\\u0435\\u0431\\u0435\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), representation === 'matrix' && /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 39\n    }, this), representation === 'list' && /*#__PURE__*/_jsxDEV(AdjacencyList, {\n      adjacencyList: adjacencyList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 37\n    }, this), representation === 'edges' && /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        children: \"\\u0421\\u0442\\u0430\\u0440\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseDFS,\n        disabled: !isRunning,\n        children: isPaused ? 'Продовжити' : 'Пауза'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"Rn4z8eoOFIfjuLsVtP+VScyJV7I=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","AdjacencyMatrix","AdjacencyList","EdgeList","dfsAlgorithm","jsxDEV","_jsxDEV","Graph","_s","adjacencyList","setAdjacencyList","nodes","setNodes","edges","setEdges","history","setHistory","isRunning","setIsRunning","isPaused","setIsPaused","queue","setQueue","currentNode","setCurrentNode","representation","setRepresentation","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","initialAdjacencyList","startDFS","startNodeId","parseInt","prompt","isNaN","some","node","alert","length","current","shift","prevNodes","map","Promise","resolve","setTimeout","neighbors","neighbor","find","includes","prevQueue","pauseDFS","renderGraph","width","height","children","edge","index","fromNode","toNode","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AdjacencyMatrix from './AdjacencyMatrix/AdjacencyMatrix';\r\nimport AdjacencyList from './AdjacencyList/AdjacencyList';\r\nimport EdgeList from './EdgeList/EdgeList';\r\nimport './Graph.css';\r\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\r\n\r\nconst Graph = () => {\r\n  const [adjacencyList, setAdjacencyList] = useState({});\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [queue, setQueue] = useState([]); // Черга для обробки вершин у DFS\r\n  const [currentNode, setCurrentNode] = useState(null); // Поточна оброблювана вершина\r\n  const [representation, setRepresentation] = useState('matrix');\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 300, y: 50, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 250, y: 150, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 350, y: 150, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 250, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 400, y: 250, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 300, y: 350, state: 'unvisited' },\r\n    ];\r\n\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 1, to: 3 },\r\n      { from: 2, to: 4 },\r\n      { from: 3, to: 5 },\r\n      { from: 4, to: 6 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n\r\n    const initialAdjacencyList = {\r\n      1: [2, 3],\r\n      2: [4],\r\n      3: [5],\r\n      4: [6],\r\n      5: [6],\r\n      6: [],\r\n    };\r\n\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n    setAdjacencyList(initialAdjacencyList);\r\n  };\r\n\r\n  const startDFS = async () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\r\n    if (isNaN(startNodeId) || !nodes.some((node) => node.id === startNodeId)) {\r\n      alert('Некоректний ID початкової вершини');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setIsPaused(false);\r\n    setQueue([startNodeId]);\r\n\r\n    // Виконання алгоритму DFS з візуалізацією\r\n    while (queue.length > 0 && !isPaused) {\r\n      const current = queue.shift();\r\n      setCurrentNode(current);\r\n\r\n      // Оновлення стану вершин\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === current ? { ...node, state: 'processing' } : node\r\n        )\r\n      );\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 1000)); // Затримка для візуалізації\r\n\r\n      // Додавання сусідів у чергу\r\n      const neighbors = adjacencyList[current] || [];\r\n      for (const neighbor of neighbors) {\r\n        if (!nodes.find((node) => node.id === neighbor).state.includes('visited')) {\r\n          setQueue((prevQueue) => [...prevQueue, neighbor]);\r\n        }\r\n      }\r\n\r\n      // Завершення обробки поточної вершини\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === current ? { ...node, state: 'visited' } : node\r\n        )\r\n      );\r\n      setCurrentNode(null); // Скидаємо поточну вершину\r\n    }\r\n\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  const renderGraph = () => (\r\n    <svg width=\"800\" height=\"600\">\r\n      {edges.map((edge, index) => {\r\n        const fromNode = nodes.find((node) => node.id === edge.from);\r\n        const toNode = nodes.find((node) => node.id === edge.to);\r\n        if (!fromNode || !toNode) return null;\r\n        return (\r\n          <line\r\n            key={index}\r\n            x1={fromNode.x}\r\n            y1={fromNode.y}\r\n            x2={toNode.x}\r\n            y2={toNode.y}\r\n            stroke=\"black\"\r\n            markerEnd=\"url(#arrowhead)\"\r\n          />\r\n        );\r\n      })}\r\n      <defs>\r\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\r\n          <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n        </marker>\r\n      </defs>\r\n      {nodes.map((node) => (\r\n        <g key={node.id}>\r\n          <circle\r\n            cx={node.x}\r\n            cy={node.y}\r\n            r=\"20\"\r\n            fill={\r\n              node.state === 'unvisited'\r\n                ? 'gray'\r\n                : node.state === 'processing'\r\n                ? 'orange'\r\n                : 'black'\r\n            }\r\n          />\r\n          <text x={node.x} y={node.y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"15\">\r\n            {node.label}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Графа</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n      <div className=\"representation-controls\">\r\n        <button onClick={() => setRepresentation('matrix')}>Матриця Суміжності</button>\r\n        <button onClick={() => setRepresentation('list')}>Список Суміжності</button>\r\n        <button onClick={() => setRepresentation('edges')}>Список Ребер</button>\r\n      </div>\r\n      {representation === 'matrix' && <AdjacencyMatrix nodes={nodes} edges={edges} />}\r\n      {representation === 'list' && <AdjacencyList adjacencyList={adjacencyList} />}\r\n      {representation === 'edges' && <EdgeList edges={edges} />}\r\n      <div className=\"controls\">\r\n        <button onClick={startDFS}>Старт</button>\r\n        <button onClick={pauseDFS} disabled={!isRunning}>\r\n          {isPaused ? 'Продовжити' : 'Пауза'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}