{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport Controls from './Controls';\nimport Visualization from './Visualization';\nimport RepresentationControls from './RepresentationControls';\nimport CurrentNode from './CurrentNode';\nimport AdjacencyMatrix from './combineMatrix/combineMatrix';\nimport EdgeList from './list/List';\nimport { initializeDFS, startDFS, performDFSStep, pauseDFS, undoDFS, backDFS } from './algorithms/dfs';\nimport './Graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [targetNode, setTargetNode] = useState(null);\n  const [stepHistory, setStepHistory] = useState([]);\n  const [representation, setRepresentation] = useState('matrix');\n  const [delay, setDelay] = useState(1000);\n  const [stack, setStack] = useState([]);\n  const isPausedRef = useRef(isPaused);\n  const nodesRef = useRef(nodes);\n  const timeoutRef = useRef(null);\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n  useEffect(() => {\n    nodesRef.current = nodes;\n  }, [nodes]);\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 200,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 400,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 600,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 200,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 400,\n      y: 200,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 600,\n      y: 200,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 3,\n      to: 4\n    }, {\n      from: 4,\n      to: 5\n    }, {\n      from: 5,\n      to: 6\n    }];\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n    const newNodeId = nodes.length + 1;\n    const predefinedPositions = {\n      7: {\n        x: 200,\n        y: 300\n      },\n      8: {\n        x: 400,\n        y: 300\n      },\n      9: {\n        x: 600,\n        y: 300\n      },\n      10: {\n        x: 200,\n        y: 400\n      },\n      11: {\n        x: 400,\n        y: 400\n      },\n      12: {\n        x: 600,\n        y: 400\n      },\n      13: {\n        x: 200,\n        y: 500\n      },\n      14: {\n        x: 400,\n        y: 500\n      },\n      15: {\n        x: 600,\n        y: 500\n      }\n    };\n    const position = predefinedPositions[newNodeId];\n    if (!position) {\n      alert('Немає визначеної позиції для нової вершини.');\n      return;\n    }\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: position.x,\n      y: position.y,\n      state: 'unvisited'\n    };\n    setNodes(prev => [...prev, newNode]);\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.some(node => node.id === nodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    setNodes(prev => prev.filter(node => node.id !== nodeId));\n    setEdges(prev => prev.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !nodes.some(node => node.id === fromId) || !nodes.some(node => node.id === toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setEdges(prev => [...prev, {\n      from: fromId,\n      to: toId\n    }]);\n  };\n  const deleteEdge = () => {\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'), 10);\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'), 10);\n    if (isNaN(fromId) || isNaN(toId) || !edges.some(edge => edge.from === fromId && edge.to === toId)) {\n      alert('Ребро не знайдено');\n      return;\n    }\n    setEdges(prev => prev.filter(edge => !(edge.from === fromId && edge.to === toId)));\n  };\n  const updateNodeState = useCallback((id, state) => {\n    setNodes(prev => prev.map(node => node.id === id ? {\n      ...node,\n      state\n    } : node));\n    setCurrentNode(id);\n  }, []);\n  useEffect(() => {\n    if (isRunning && !isPaused) {\n      timeoutRef.current = setTimeout(async () => {\n        await performDFSStep({\n          nodesRef,\n          edges,\n          stack,\n          setStack,\n          updateNodeState,\n          setStepHistory,\n          delay,\n          targetNode,\n          isPausedRef,\n          setIsRunning\n        });\n      }, delay);\n    }\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    };\n  }, [isRunning, isPaused, stack, edges, delay, targetNode, updateNodeState]);\n  const startDFS = () => {\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    const endNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\n    if (isNaN(startNodeId) || isNaN(endNodeId) || !nodes.some(node => node.id === startNodeId) || !nodes.some(node => node.id === endNodeId)) {\n      alert('Некоректний ID вершини');\n      return;\n    }\n    const {\n      nodes: initNodes,\n      stepHistory: initStepHistory,\n      currentNode: initCurrentNode,\n      targetNode: initTargetNode\n    } = initializeDFS(nodes, endNodeId);\n    setNodes(initNodes);\n    setStepHistory(initStepHistory);\n    setCurrentNode(initCurrentNode);\n    setTargetNode(initTargetNode);\n    startDFS(startNodeId, endNodeId, setIsRunning, setIsPaused, setTargetNode, setStack, setNodes);\n  };\n  const pauseDFS = () => {\n    pauseDFS(isRunning, setIsPaused, isPaused);\n  };\n  const backDFS = () => {\n    backDFS(stepHistory, setStepHistory, setNodes, setStack, setCurrentNode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 \\u0432 \\u0413\\u043B\\u0438\\u0431\\u0438\\u043D\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Visualization, {\n      nodes: nodes,\n      edges: edges,\n      target: targetNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      onAddNode: addNode,\n      onDeleteNode: deleteNode,\n      onAddEdge: addEdge,\n      onDeleteEdge: deleteEdge,\n      onStartDFS: startDFS,\n      onPauseDFS: pauseDFS,\n      onUndoDFS: backDFS,\n      isRunning: isRunning,\n      isPaused: isPaused,\n      delay: delay,\n      setDelay: setDelay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentNode, {\n      node: currentNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RepresentationControls, {\n      setView: setRepresentation,\n      currentView: representation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), representation === 'matrix' ? /*#__PURE__*/_jsxDEV(AdjacencyMatrix, {\n      nodes: nodes,\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EdgeList, {\n      edges: edges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), isRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-stack\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Stack: \", stack.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"oI53znZQ2w1pYD//hCudQtIKQxU=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Link","Controls","Visualization","RepresentationControls","CurrentNode","AdjacencyMatrix","EdgeList","initializeDFS","startDFS","performDFSStep","pauseDFS","undoDFS","backDFS","jsxDEV","_jsxDEV","Graph","_s","nodes","setNodes","edges","setEdges","isRunning","setIsRunning","isPaused","setIsPaused","currentNode","setCurrentNode","targetNode","setTargetNode","stepHistory","setStepHistory","representation","setRepresentation","delay","setDelay","stack","setStack","isPausedRef","nodesRef","timeoutRef","current","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","addNode","length","alert","newNodeId","predefinedPositions","position","newNode","prev","deleteNode","nodeId","parseInt","prompt","isNaN","some","node","filter","edge","addEdge","fromId","toId","deleteEdge","updateNodeState","map","setTimeout","clearTimeout","startNodeId","endNodeId","initNodes","initStepHistory","initCurrentNode","initTargetNode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","target","onAddNode","onDeleteNode","onAddEdge","onDeleteEdge","onStartDFS","onPauseDFS","onUndoDFS","setView","currentView","join","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Controls from './Controls';\r\nimport Visualization from './Visualization';\r\nimport RepresentationControls from './RepresentationControls';\r\nimport CurrentNode from './CurrentNode';\r\nimport AdjacencyMatrix from './combineMatrix/combineMatrix';\r\nimport EdgeList from './list/List';\r\nimport {\r\n  initializeDFS,\r\n  startDFS,\r\n  performDFSStep,\r\n  pauseDFS,\r\n  undoDFS,\r\n  backDFS\r\n} from './algorithms/dfs';\r\nimport './Graph.css';\r\n\r\nconst Graph = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n  const [targetNode, setTargetNode] = useState(null);\r\n  const [stepHistory, setStepHistory] = useState([]);\r\n  const [representation, setRepresentation] = useState('matrix');\r\n  const [delay, setDelay] = useState(1000);\r\n  const [stack, setStack] = useState([]);\r\n  const isPausedRef = useRef(isPaused);\r\n  const nodesRef = useRef(nodes);\r\n  const timeoutRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    isPausedRef.current = isPaused;\r\n  }, [isPaused]);\r\n\r\n  useEffect(() => {\r\n    nodesRef.current = nodes;\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 200, y: 100, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 400, y: 100, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 600, y: 100, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 200, y: 200, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 400, y: 200, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 600, y: 200, state: 'unvisited' },\r\n    ];\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 2, to: 3 },\r\n      { from: 3, to: 4 },\r\n      { from: 4, to: 5 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n  };\r\n\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n    const newNodeId = nodes.length + 1;\r\n    const predefinedPositions = {\r\n      7: { x: 200, y: 300 },\r\n      8: { x: 400, y: 300 },\r\n      9: { x: 600, y: 300 },\r\n      10: { x: 200, y: 400 },\r\n      11: { x: 400, y: 400 },\r\n      12: { x: 600, y: 400 },\r\n      13: { x: 200, y: 500 },\r\n      14: { x: 400, y: 500 },\r\n      15: { x: 600, y: 500 },\r\n    };\r\n    const position = predefinedPositions[newNodeId];\r\n    if (!position) {\r\n      alert('Немає визначеної позиції для нової вершини.');\r\n      return;\r\n    }\r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: position.x,\r\n      y: position.y,\r\n      state: 'unvisited',\r\n    };\r\n    setNodes((prev) => [...prev, newNode]);\r\n  };\r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.some((node) => node.id === nodeId)) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n    setNodes((prev) => prev.filter((node) => node.id !== nodeId));\r\n    setEdges((prev) =>\r\n      prev.filter((edge) => edge.from !== nodeId && edge.to !== nodeId)\r\n    );\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини:'), 10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини:'), 10);\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !nodes.some((node) => node.id === fromId) ||\r\n      !nodes.some((node) => node.id === toId)\r\n    ) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n    setEdges((prev) => [...prev, { from: fromId, to: toId }]);\r\n  };\r\n\r\n  const deleteEdge = () => {\r\n    const fromId = parseInt(prompt('Введіть ID вихідної вершини для видалення ребра:'),10);\r\n    const toId = parseInt(prompt('Введіть ID цільової вершини для видалення ребра:'),10);\r\n    if (\r\n      isNaN(fromId) ||\r\n      isNaN(toId) ||\r\n      !edges.some((edge) => edge.from === fromId && edge.to === toId)\r\n    ) {\r\n      alert('Ребро не знайдено');\r\n      return;\r\n    }\r\n    setEdges((prev) =>\r\n      prev.filter((edge) => !(edge.from === fromId && edge.to === toId))\r\n    );\r\n  };\r\n\r\n  const updateNodeState = useCallback((id, state) => {\r\n    setNodes((prev) =>\r\n      prev.map((node) =>\r\n        node.id === id ? { ...node, state } : node\r\n      )\r\n    );\r\n    setCurrentNode(id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !isPaused) {\r\n      timeoutRef.current = setTimeout(async () => {\r\n        await performDFSStep({\r\n          nodesRef,\r\n          edges,\r\n          stack,\r\n          setStack,\r\n          updateNodeState,\r\n          setStepHistory,\r\n          delay,\r\n          targetNode,\r\n          isPausedRef,\r\n          setIsRunning\r\n        })\r\n      }, delay);\r\n    }\r\n    return () => {\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current)\r\n    }\r\n  }, [isRunning, isPaused, stack, edges, delay, targetNode, updateNodeState]);\r\n\r\n  const startDFS = () => {\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'),10);\r\n    const endNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'),10);\r\n    if (\r\n      isNaN(startNodeId) ||\r\n      isNaN(endNodeId) ||\r\n      !nodes.some((node) => node.id === startNodeId) ||\r\n      !nodes.some((node) => node.id === endNodeId)\r\n    ) {\r\n      alert('Некоректний ID вершини');\r\n      return;\r\n    }\r\n    const { nodes: initNodes, stepHistory: initStepHistory, currentNode: initCurrentNode, targetNode: initTargetNode } = initializeDFS(nodes, endNodeId);\r\n    setNodes(initNodes);\r\n    setStepHistory(initStepHistory);\r\n    setCurrentNode(initCurrentNode);\r\n    setTargetNode(initTargetNode);\r\n    startDFS(startNodeId, endNodeId, setIsRunning, setIsPaused, setTargetNode, setStack, setNodes);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    pauseDFS(isRunning,setIsPaused,isPaused)\r\n  };\r\n\r\n  const backDFS = () => {\r\n    backDFS(stepHistory,setStepHistory,setNodes,setStack,setCurrentNode)\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Пошуку в Глибину (DFS)</h1>\r\n      <Visualization nodes={nodes} edges={edges} target={targetNode} />\r\n      <Controls\r\n        onAddNode={addNode}\r\n        onDeleteNode={deleteNode}\r\n        onAddEdge={addEdge}\r\n        onDeleteEdge={deleteEdge}\r\n        onStartDFS={startDFS}\r\n        onPauseDFS={pauseDFS}\r\n        onUndoDFS={backDFS}\r\n        isRunning={isRunning}\r\n        isPaused={isPaused}\r\n        delay={delay}\r\n        setDelay={setDelay}\r\n      />\r\n      <CurrentNode node={currentNode} />\r\n      <RepresentationControls\r\n        setView={setRepresentation}\r\n        currentView={representation}\r\n      />\r\n      {representation === 'matrix' ? (\r\n        <AdjacencyMatrix nodes={nodes} edges={edges} />\r\n      ) : (\r\n        <EdgeList edges={edges} />\r\n      )}\r\n      {isRunning && (\r\n        <div className=\"current-stack\">\r\n          <p>Current Stack: {stack.join(', ')}</p>\r\n        </div>\r\n      )}\r\n      <Link to=\"/\">\r\n        <button>Home</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}