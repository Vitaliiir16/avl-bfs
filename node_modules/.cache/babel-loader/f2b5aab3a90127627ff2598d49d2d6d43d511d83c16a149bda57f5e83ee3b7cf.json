{"ast":null,"code":"var _jsxFileName = \"D:\\\\kr\\\\src\\\\components\\\\Graph\\\\Graph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Graph.css';\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [queue, setQueue] = useState([]);\n  const [currentNode, setCurrentNode] = useState(null);\n  useEffect(() => {\n    initializeGraph();\n  }, []);\n  const initializeGraph = () => {\n    // Структуроване завдання вершин\n    const initialNodes = [{\n      id: 1,\n      label: 'V1',\n      x: 200,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 2,\n      label: 'V2',\n      x: 400,\n      y: 100,\n      state: 'unvisited'\n    }, {\n      id: 3,\n      label: 'V3',\n      x: 300,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 4,\n      label: 'V4',\n      x: 500,\n      y: 300,\n      state: 'unvisited'\n    }, {\n      id: 5,\n      label: 'V5',\n      x: 200,\n      y: 500,\n      state: 'unvisited'\n    }, {\n      id: 6,\n      label: 'V6',\n      x: 400,\n      y: 500,\n      state: 'unvisited'\n    }];\n    const initialEdges = [{\n      from: 1,\n      to: 2\n    }, {\n      from: 2,\n      to: 3\n    }, {\n      from: 3,\n      to: 4\n    }, {\n      from: 4,\n      to: 5\n    }, {\n      from: 5,\n      to: 6\n    }];\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const saveHistory = () => {\n    setHistory([...history, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n  };\n  const addNode = () => {\n    if (nodes.length >= 15) {\n      alert('Максимальна кількість вершин досягнута');\n      return;\n    }\n\n    // Додавання нової вершини в заздалегідь визначене місце\n    const newNodeId = nodes.length + 1;\n    const row = Math.floor(newNodeId / 3) + 1;\n    const col = newNodeId % 3 + 1;\n    const newNode = {\n      id: newNodeId,\n      label: `V${newNodeId}`,\n      x: col * 200,\n      y: row * 200,\n      state: 'unvisited'\n    };\n    saveHistory();\n\n    // Оновлення положень існуючих вершин\n    const updatedNodes = nodes.map(node => ({\n      ...node,\n      x: node.x + 10,\n      y: node.y + 10\n    }));\n    setNodes([...updatedNodes, newNode]);\n  };\n  const deleteNode = () => {\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\n    if (isNaN(nodeId) || !nodes.find(node => node.id === nodeId)) {\n      alert('Введено некоректний ID');\n      return;\n    }\n    saveHistory();\n    setNodes(nodes.filter(node => node.id !== nodeId));\n    setEdges(edges.filter(edge => edge.from !== nodeId && edge.to !== nodeId));\n  };\n  const addEdge = () => {\n    const fromId = parseInt(prompt('З якої вершини (ID)?'), 10);\n    const toId = parseInt(prompt('До якої вершини (ID)?'), 10);\n    if (isNaN(fromId) || isNaN(toId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    saveHistory();\n    setEdges([...edges, {\n      from: fromId,\n      to: toId\n    }]);\n  };\n  const startDFS = async () => {\n    if (isRunning) return;\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\n    const targetNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\n    if (isNaN(startNodeId) || isNaN(targetNodeId)) {\n      alert('Некоректні ID вершин');\n      return;\n    }\n    setIsRunning(true);\n    setQueue([startNodeId]);\n    const updatedNodes = nodes.map(node => ({\n      ...node,\n      state: node.id === startNodeId ? 'processing' : 'unvisited'\n    }));\n    setNodes(updatedNodes);\n    await dfsAlgorithm(nodes, edges, startNodeId, setQueue, setCurrentNode, setNodes);\n    setIsRunning(false);\n  };\n  const pauseDFS = () => {\n    setIsPaused(!isPaused);\n  };\n  const undo = () => {\n    if (history.length === 0) {\n      alert('Немає попередніх станів для відкату.');\n      return;\n    }\n    const previousState = history.pop();\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n  };\n  const renderGraph = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"800\",\n    height: \"600\",\n    children: [edges.map((edge, index) => {\n      const fromNode = nodes.find(node => node.id === edge.from);\n      const toNode = nodes.find(node => node.id === edge.to);\n      if (!fromNode || !toNode) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: fromNode.x,\n        y1: fromNode.y,\n        x2: toNode.x,\n        y2: toNode.y,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"10\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), nodes.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: node.state === 'unvisited' ? 'gray' : node.state === 'processing' ? 'orange' : 'black'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y + 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"15\",\n        children: node.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0413\\u043B\\u0438\\u0431\\u043E\\u043A\\u043E\\u0433\\u043E \\u041F\\u043E\\u0448\\u0443\\u043A\\u0443 (DFS)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-area\",\n      children: renderGraph()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNode,\n        children: \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u0412\\u0435\\u0440\\u0448\\u0438\\u043D\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addEdge,\n        children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438 \\u0420\\u0435\\u0431\\u0440\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startDFS,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pauseDFS,\n        disabled: !isRunning,\n        children: isPaused ? 'Продовжити' : 'Пауза'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"x+QZTy4jLen9u3SlL/ogYVAEQbY=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","Link","dfsAlgorithm","jsxDEV","_jsxDEV","Graph","_s","nodes","setNodes","edges","setEdges","history","setHistory","isRunning","setIsRunning","isPaused","setIsPaused","queue","setQueue","currentNode","setCurrentNode","initializeGraph","initialNodes","id","label","x","y","state","initialEdges","from","to","saveHistory","addNode","length","alert","newNodeId","row","Math","floor","col","newNode","updatedNodes","map","node","deleteNode","nodeId","parseInt","prompt","isNaN","find","filter","edge","addEdge","fromId","toId","startDFS","startNodeId","targetNodeId","pauseDFS","undo","previousState","pop","renderGraph","width","height","children","index","fromNode","toNode","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","fill","textAnchor","fontSize","className","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/kr/src/components/Graph/Graph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Graph.css';\r\nimport dfsAlgorithm from './dfsAlgorithm/dfsAlgorithm';\r\n\r\nconst Graph = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [queue, setQueue] = useState([]);\r\n  const [currentNode, setCurrentNode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    initializeGraph();\r\n  }, []);\r\n\r\n  const initializeGraph = () => {\r\n    // Структуроване завдання вершин\r\n    const initialNodes = [\r\n      { id: 1, label: 'V1', x: 200, y: 100, state: 'unvisited' },\r\n      { id: 2, label: 'V2', x: 400, y: 100, state: 'unvisited' },\r\n      { id: 3, label: 'V3', x: 300, y: 300, state: 'unvisited' },\r\n      { id: 4, label: 'V4', x: 500, y: 300, state: 'unvisited' },\r\n      { id: 5, label: 'V5', x: 200, y: 500, state: 'unvisited' },\r\n      { id: 6, label: 'V6', x: 400, y: 500, state: 'unvisited' },\r\n    ];\r\n\r\n    const initialEdges = [\r\n      { from: 1, to: 2 },\r\n      { from: 2, to: 3 },\r\n      { from: 3, to: 4 },\r\n      { from: 4, to: 5 },\r\n      { from: 5, to: 6 },\r\n    ];\r\n\r\n    setNodes(initialNodes);\r\n    setEdges(initialEdges);\r\n  };\r\n\r\n  const saveHistory = () => {\r\n    setHistory([...history, { nodes: [...nodes], edges: [...edges] }]);\r\n  };\r\n\r\n  const addNode = () => {\r\n    if (nodes.length >= 15) {\r\n      alert('Максимальна кількість вершин досягнута');\r\n      return;\r\n    }\r\n\r\n    // Додавання нової вершини в заздалегідь визначене місце\r\n    const newNodeId = nodes.length + 1;\r\n    const row = Math.floor(newNodeId / 3) + 1;\r\n    const col = (newNodeId % 3) + 1;\r\n\r\n    const newNode = {\r\n      id: newNodeId,\r\n      label: `V${newNodeId}`,\r\n      x: col * 200,\r\n      y: row * 200,\r\n      state: 'unvisited',\r\n    };\r\n\r\n    saveHistory();\r\n\r\n    // Оновлення положень існуючих вершин\r\n    const updatedNodes = nodes.map((node) => ({\r\n      ...node,\r\n      x: node.x + 10,\r\n      y: node.y + 10,\r\n    }));\r\n\r\n    setNodes([...updatedNodes, newNode]);\r\n  };\r\n\r\n  const deleteNode = () => {\r\n    const nodeId = parseInt(prompt('Введіть ID вершини для видалення:'), 10);\r\n    if (isNaN(nodeId) || !nodes.find((node) => node.id === nodeId)) {\r\n      alert('Введено некоректний ID');\r\n      return;\r\n    }\r\n\r\n    saveHistory();\r\n    setNodes(nodes.filter((node) => node.id !== nodeId));\r\n    setEdges(edges.filter((edge) => edge.from !== nodeId && edge.to !== nodeId));\r\n  };\r\n\r\n  const addEdge = () => {\r\n    const fromId = parseInt(prompt('З якої вершини (ID)?'), 10);\r\n    const toId = parseInt(prompt('До якої вершини (ID)?'), 10);\r\n\r\n    if (isNaN(fromId) || isNaN(toId)) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    saveHistory();\r\n    setEdges([...edges, { from: fromId, to: toId }]);\r\n  };\r\n\r\n  const startDFS = async () => {\r\n    if (isRunning) return;\r\n\r\n    const startNodeId = parseInt(prompt('Введіть ID початкової вершини:'), 10);\r\n    const targetNodeId = parseInt(prompt('Введіть ID кінцевої вершини:'), 10);\r\n\r\n    if (isNaN(startNodeId) || isNaN(targetNodeId)) {\r\n      alert('Некоректні ID вершин');\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n    setQueue([startNodeId]);\r\n\r\n    const updatedNodes = nodes.map((node) => ({\r\n      ...node,\r\n      state: node.id === startNodeId ? 'processing' : 'unvisited',\r\n    }));\r\n    setNodes(updatedNodes);\r\n\r\n    await dfsAlgorithm(nodes, edges, startNodeId, setQueue, setCurrentNode, setNodes);\r\n\r\n    setIsRunning(false);\r\n  };\r\n\r\n  const pauseDFS = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  const undo = () => {\r\n    if (history.length === 0) {\r\n      alert('Немає попередніх станів для відкату.');\r\n      return;\r\n    }\r\n\r\n    const previousState = history.pop();\r\n    setNodes(previousState.nodes);\r\n    setEdges(previousState.edges);\r\n  };\r\n\r\n  const renderGraph = () => (\r\n    <svg width=\"800\" height=\"600\">\r\n      {edges.map((edge, index) => {\r\n        const fromNode = nodes.find((node) => node.id === edge.from);\r\n        const toNode = nodes.find((node) => node.id === edge.to);\r\n\r\n        if (!fromNode || !toNode) return null;\r\n\r\n        return (\r\n          <line\r\n            key={index}\r\n            x1={fromNode.x}\r\n            y1={fromNode.y}\r\n            x2={toNode.x}\r\n            y2={toNode.y}\r\n            stroke=\"black\"\r\n            markerEnd=\"url(#arrowhead)\"\r\n          />\r\n        );\r\n      })}\r\n      <defs>\r\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\r\n          <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n        </marker>\r\n      </defs>\r\n      {nodes.map((node) => (\r\n        <g key={node.id}>\r\n          <circle\r\n            cx={node.x}\r\n            cy={node.y}\r\n            r=\"20\"\r\n            fill={\r\n              node.state === 'unvisited'\r\n                ? 'gray'\r\n                : node.state === 'processing'\r\n                ? 'orange'\r\n                : 'black'\r\n            }\r\n          />\r\n          <text x={node.x} y={node.y + 5} textAnchor=\"middle\" fill=\"white\" fontSize=\"15\">\r\n            {node.label}\r\n          </text>\r\n        </g>\r\n      ))}\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h1>Алгоритм Глибокого Пошуку (DFS)</h1>\r\n      <div className=\"graph-area\">{renderGraph()}</div>\r\n      <div className=\"controls\">\r\n        <button onClick={addNode}>Додати Вершину</button>\r\n        <button onClick={deleteNode}>Видалити Вершину</button>\r\n        <button onClick={addEdge}>Додати Ребро</button>\r\n        <button onClick={startDFS}>Start</button>\r\n        <button onClick={pauseDFS} disabled={!isRunning}>\r\n          {isPaused ? 'Продовжити' : 'Пауза'}\r\n        </button>\r\n        <button onClick={undo}>Назад</button>\r\n        <Link to=\"/\">\r\n          <button>Home</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}