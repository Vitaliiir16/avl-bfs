{"ast":null,"code":"// Define NIL as an empty object\nconst NIL = {};\n\n// Now define the Node class\nclass Node {\n  constructor(value) {\n    this.id = Math.random().toString(36).substr(2, 9); // Unique ID\n    this.value = value;\n    this.color = 'red'; // New nodes are always red\n    this.left = NIL;\n    this.right = NIL;\n    this.parent = NIL;\n  }\n}\n\n// Initialize the NIL node\nNIL.id = null;\nNIL.value = null;\nNIL.color = 'black';\nNIL.left = NIL;\nNIL.right = NIL;\nNIL.parent = NIL;\n\n// Now proceed with the rest of your code\n\nexport function insertNode(root, value) {\n  const newNode = new Node(value);\n  let y = null;\n  let x = root;\n  while (x !== NIL && x !== null) {\n    y = x;\n    if (newNode.value < x.value) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  newNode.parent = y;\n  if (y === null) {\n    root = newNode;\n  } else if (newNode.value < y.value) {\n    y.left = newNode;\n  } else {\n    y.right = newNode;\n  }\n\n  // newNode.left and newNode.right are already NIL\n  newNode.color = 'red';\n  root = fixInsert(root, newNode);\n  return root;\n}\n\n// ... rest of your code (fixInsert, deleteNode, etc.) ...\n\nexport function deleteNode(root, value) {\n  let z = searchNode(root, value);\n  if (z === NIL || z === null) return root;\n  let y = z;\n  let yOriginalColor = y.color;\n  let x;\n  if (z.left === NIL) {\n    x = z.right;\n    root = transplant(root, z, z.right);\n  } else if (z.right === NIL) {\n    x = z.left;\n    root = transplant(root, z, z.left);\n  } else {\n    y = treeMinimum(z.right);\n    yOriginalColor = y.color;\n    x = y.right;\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      root = transplant(root, y, y.right);\n      y.right = z.right;\n      y.right.parent = y;\n    }\n    root = transplant(root, z, y);\n    y.left = z.left;\n    y.left.parent = y;\n    y.color = z.color;\n  }\n  if (yOriginalColor === 'black') {\n    root = fixDelete(root, x);\n  }\n  return root;\n}\nfunction transplant(root, u, v) {\n  if (u.parent === null) {\n    root = v;\n  } else if (u === u.parent.left) {\n    u.parent.left = v;\n  } else {\n    u.parent.right = v;\n  }\n  v.parent = u.parent;\n  return root;\n}\nfunction fixDelete(root, x) {\n  while (x !== root && x.color === 'black') {\n    if (x === x.parent.left) {\n      let w = x.parent.right;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = leftRotate(root, x.parent);\n        w = x.parent.right;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.right.color === 'black') {\n          w.left.color = 'black';\n          w.color = 'red';\n          root = rightRotate(root, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.right.color = 'black';\n        root = leftRotate(root, x.parent);\n        x = root;\n      }\n    } else {\n      let w = x.parent.left;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = rightRotate(root, x.parent);\n        w = x.parent.left;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.left.color === 'black') {\n          w.right.color = 'black';\n          w.color = 'red';\n          root = leftRotate(root, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.left.color = 'black';\n        root = rightRotate(root, x.parent);\n        x = root;\n      }\n    }\n  }\n  x.color = 'black';\n  return root;\n}\nexport function searchNode(root, value) {\n  let current = root;\n  while (current !== NIL && current !== null) {\n    if (value === current.value) {\n      return current;\n    } else if (value < current.value) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n  return null;\n}\nfunction leftRotate(root, x) {\n  let y = x.right;\n  x.right = y.left;\n  if (y.left !== NIL) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === null) {\n    root = y;\n  } else if (x === x.parent.left) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n  return root;\n}\nfunction rightRotate(root, y) {\n  let x = y.left;\n  y.left = x.right;\n  if (x.right !== NIL) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  if (y.parent === null) {\n    root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n  x.right = y;\n  y.parent = x;\n  return root;\n}\nfunction treeMinimum(x) {\n  while (x.left !== NIL) {\n    x = x.left;\n  }\n  return x;\n}","map":{"version":3,"names":["NIL","Node","constructor","value","id","Math","random","toString","substr","color","left","right","parent","insertNode","root","newNode","y","x","fixInsert","deleteNode","z","searchNode","yOriginalColor","transplant","treeMinimum","fixDelete","u","v","w","leftRotate","rightRotate","current"],"sources":["D:/dfs-rbt-visualization/src/components/RedBlackTree/rbtOperations.js"],"sourcesContent":["// Define NIL as an empty object\r\nconst NIL = {};\r\n\r\n// Now define the Node class\r\nclass Node {\r\n  constructor(value) {\r\n    this.id = Math.random().toString(36).substr(2, 9); // Unique ID\r\n    this.value = value;\r\n    this.color = 'red'; // New nodes are always red\r\n    this.left = NIL;\r\n    this.right = NIL;\r\n    this.parent = NIL;\r\n  }\r\n}\r\n\r\n// Initialize the NIL node\r\nNIL.id = null;\r\nNIL.value = null;\r\nNIL.color = 'black';\r\nNIL.left = NIL;\r\nNIL.right = NIL;\r\nNIL.parent = NIL;\r\n\r\n// Now proceed with the rest of your code\r\n\r\nexport function insertNode(root, value) {\r\n  const newNode = new Node(value);\r\n\r\n  let y = null;\r\n  let x = root;\r\n\r\n  while (x !== NIL && x !== null) {\r\n    y = x;\r\n    if (newNode.value < x.value) {\r\n      x = x.left;\r\n    } else {\r\n      x = x.right;\r\n    }\r\n  }\r\n\r\n  newNode.parent = y;\r\n\r\n  if (y === null) {\r\n    root = newNode;\r\n  } else if (newNode.value < y.value) {\r\n    y.left = newNode;\r\n  } else {\r\n    y.right = newNode;\r\n  }\r\n\r\n  // newNode.left and newNode.right are already NIL\r\n  newNode.color = 'red';\r\n\r\n  root = fixInsert(root, newNode);\r\n  return root;\r\n}\r\n\r\n// ... rest of your code (fixInsert, deleteNode, etc.) ...\r\n\r\n\r\nexport function deleteNode(root, value) {\r\n  let z = searchNode(root, value);\r\n  if (z === NIL || z === null) return root;\r\n\r\n  let y = z;\r\n  let yOriginalColor = y.color;\r\n  let x;\r\n\r\n  if (z.left === NIL) {\r\n    x = z.right;\r\n    root = transplant(root, z, z.right);\r\n  } else if (z.right === NIL) {\r\n    x = z.left;\r\n    root = transplant(root, z, z.left);\r\n  } else {\r\n    y = treeMinimum(z.right);\r\n    yOriginalColor = y.color;\r\n    x = y.right;\r\n    if (y.parent === z) {\r\n      x.parent = y;\r\n    } else {\r\n      root = transplant(root, y, y.right);\r\n      y.right = z.right;\r\n      y.right.parent = y;\r\n    }\r\n    root = transplant(root, z, y);\r\n    y.left = z.left;\r\n    y.left.parent = y;\r\n    y.color = z.color;\r\n  }\r\n\r\n  if (yOriginalColor === 'black') {\r\n    root = fixDelete(root, x);\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\nfunction transplant(root, u, v) {\r\n  if (u.parent === null) {\r\n    root = v;\r\n  } else if (u === u.parent.left) {\r\n    u.parent.left = v;\r\n  } else {\r\n    u.parent.right = v;\r\n  }\r\n  v.parent = u.parent;\r\n  return root;\r\n}\r\n\r\nfunction fixDelete(root, x) {\r\n  while (x !== root && x.color === 'black') {\r\n    if (x === x.parent.left) {\r\n      let w = x.parent.right;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = leftRotate(root, x.parent);\r\n        w = x.parent.right;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.right.color === 'black') {\r\n          w.left.color = 'black';\r\n          w.color = 'red';\r\n          root = rightRotate(root, w);\r\n          w = x.parent.right;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.right.color = 'black';\r\n        root = leftRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    } else {\r\n      let w = x.parent.left;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = rightRotate(root, x.parent);\r\n        w = x.parent.left;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.left.color === 'black') {\r\n          w.right.color = 'black';\r\n          w.color = 'red';\r\n          root = leftRotate(root, w);\r\n          w = x.parent.left;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.left.color = 'black';\r\n        root = rightRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    }\r\n  }\r\n  x.color = 'black';\r\n  return root;\r\n}\r\n\r\nexport function searchNode(root, value) {\r\n  let current = root;\r\n  while (current !== NIL && current !== null) {\r\n    if (value === current.value) {\r\n      return current;\r\n    } else if (value < current.value) {\r\n      current = current.left;\r\n    } else {\r\n      current = current.right;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction leftRotate(root, x) {\r\n  let y = x.right;\r\n  x.right = y.left;\r\n  if (y.left !== NIL) {\r\n    y.left.parent = x;\r\n  }\r\n  y.parent = x.parent;\r\n  if (x.parent === null) {\r\n    root = y;\r\n  } else if (x === x.parent.left) {\r\n    x.parent.left = y;\r\n  } else {\r\n    x.parent.right = y;\r\n  }\r\n  y.left = x;\r\n  x.parent = y;\r\n  return root;\r\n}\r\n\r\nfunction rightRotate(root, y) {\r\n  let x = y.left;\r\n  y.left = x.right;\r\n  if (x.right !== NIL) {\r\n    x.right.parent = y;\r\n  }\r\n  x.parent = y.parent;\r\n  if (y.parent === null) {\r\n    root = x;\r\n  } else if (y === y.parent.right) {\r\n    y.parent.right = x;\r\n  } else {\r\n    y.parent.left = x;\r\n  }\r\n  x.right = y;\r\n  y.parent = x;\r\n  return root;\r\n}\r\n\r\nfunction treeMinimum(x) {\r\n  while (x.left !== NIL) {\r\n    x = x.left;\r\n  }\r\n  return x;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}