{"ast":null,"code":"// src/components/Graph/algorithms/depthFirstSearch.js\n\nexport const depthFirstSearch = async (nodesRef, edges, startId, endId, updateNodeState, setStepHistory, setStack, delay = 1000, isPausedRef) => {\n  const stack = [startId];\n  setStack([...stack]);\n  while (stack.length > 0) {\n    // Перевіряємо стан паузи\n    if (isPausedRef.current) {\n      await new Promise(resolve => {\n        const interval = setInterval(() => {\n          if (!isPausedRef.current) {\n            clearInterval(interval);\n            resolve();\n          }\n        }, 100);\n      });\n    }\n    const current = stack.pop();\n    setStack([...stack]);\n\n    // Отримуємо поточну вершину з оновленим станом\n    const currentNode = nodesRef.current.find(node => node.id === current);\n    if (!currentNode || currentNode.state !== 'unvisited') {\n      continue; // Пропускаємо, якщо вершина вже оброблена\n    }\n\n    // Оновлюємо стан поточної вершини на \"processing\"\n    updateNodeState(current, 'processing');\n    setStepHistory(prevHistory => [...prevHistory, current]);\n\n    // Затримка для анімації\n    await new Promise(resolve => setTimeout(resolve, delay));\n    if (current === endId) {\n      // Якщо знайшли цільову вершину, оновлюємо її стан на \"target\"\n      updateNodeState(current, 'target');\n      alert(`Знайдено кінцеву вершину V${endId}`);\n      return;\n    }\n\n    // Отримуємо сусідів, які ще не відвідані\n    const neighbors = edges.filter(edge => edge.from === current).map(edge => edge.to).filter(neighborId => {\n      const neighbor = nodesRef.current.find(node => node.id === neighborId);\n      return neighbor && neighbor.state === 'unvisited';\n    });\n\n    // Додаємо сусідів у стек\n    neighbors.forEach(neighbor => stack.push(neighbor));\n    setStack([...stack]);\n\n    // Оновлюємо стан поточної вершини на \"visited\"\n    updateNodeState(current, 'visited');\n\n    // Затримка для анімації\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  alert('Цільова вершина не знайдена');\n};","map":{"version":3,"names":["depthFirstSearch","nodesRef","edges","startId","endId","updateNodeState","setStepHistory","setStack","delay","isPausedRef","stack","length","current","Promise","resolve","interval","setInterval","clearInterval","pop","currentNode","find","node","id","state","prevHistory","setTimeout","alert","neighbors","filter","edge","from","map","to","neighborId","neighbor","forEach","push"],"sources":["D:/kr/src/components/Graph/algorithms/depthFirstSearch.js"],"sourcesContent":["// src/components/Graph/algorithms/depthFirstSearch.js\r\n\r\nexport const depthFirstSearch = async (\r\n  nodesRef,\r\n  edges,\r\n  startId,\r\n  endId,\r\n  updateNodeState,\r\n  setStepHistory,\r\n  setStack,\r\n  delay = 1000,\r\n  isPausedRef\r\n) => {\r\n  const stack = [startId];\r\n  setStack([...stack]);\r\n\r\n  while (stack.length > 0) {\r\n    // Перевіряємо стан паузи\r\n    if (isPausedRef.current) {\r\n      await new Promise((resolve) => {\r\n        const interval = setInterval(() => {\r\n          if (!isPausedRef.current) {\r\n            clearInterval(interval);\r\n            resolve();\r\n          }\r\n        }, 100);\r\n      });\r\n    }\r\n\r\n    const current = stack.pop();\r\n    setStack([...stack]);\r\n\r\n    // Отримуємо поточну вершину з оновленим станом\r\n    const currentNode = nodesRef.current.find((node) => node.id === current);\r\n    if (!currentNode || currentNode.state !== 'unvisited') {\r\n      continue; // Пропускаємо, якщо вершина вже оброблена\r\n    }\r\n\r\n    // Оновлюємо стан поточної вершини на \"processing\"\r\n    updateNodeState(current, 'processing');\r\n    setStepHistory((prevHistory) => [...prevHistory, current]);\r\n\r\n    // Затримка для анімації\r\n    await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n    if (current === endId) {\r\n      // Якщо знайшли цільову вершину, оновлюємо її стан на \"target\"\r\n      updateNodeState(current, 'target');\r\n      alert(`Знайдено кінцеву вершину V${endId}`);\r\n      return;\r\n    }\r\n\r\n    // Отримуємо сусідів, які ще не відвідані\r\n    const neighbors = edges\r\n      .filter((edge) => edge.from === current)\r\n      .map((edge) => edge.to)\r\n      .filter((neighborId) => {\r\n        const neighbor = nodesRef.current.find((node) => node.id === neighborId);\r\n        return neighbor && neighbor.state === 'unvisited';\r\n      });\r\n\r\n    // Додаємо сусідів у стек\r\n    neighbors.forEach((neighbor) => stack.push(neighbor));\r\n    setStack([...stack]);\r\n\r\n    // Оновлюємо стан поточної вершини на \"visited\"\r\n    updateNodeState(current, 'visited');\r\n\r\n    // Затримка для анімації\r\n    await new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  alert('Цільова вершина не знайдена');\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,gBAAgB,GAAG,MAAAA,CAC9BC,QAAQ,EACRC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,eAAe,EACfC,cAAc,EACdC,QAAQ,EACRC,KAAK,GAAG,IAAI,EACZC,WAAW,KACR;EACH,MAAMC,KAAK,GAAG,CAACP,OAAO,CAAC;EACvBI,QAAQ,CAAC,CAAC,GAAGG,KAAK,CAAC,CAAC;EAEpB,OAAOA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB;IACA,IAAIF,WAAW,CAACG,OAAO,EAAE;MACvB,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC7B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;UACjC,IAAI,CAACP,WAAW,CAACG,OAAO,EAAE;YACxBK,aAAa,CAACF,QAAQ,CAAC;YACvBD,OAAO,CAAC,CAAC;UACX;QACF,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,CAAC;IACJ;IAEA,MAAMF,OAAO,GAAGF,KAAK,CAACQ,GAAG,CAAC,CAAC;IAC3BX,QAAQ,CAAC,CAAC,GAAGG,KAAK,CAAC,CAAC;;IAEpB;IACA,MAAMS,WAAW,GAAGlB,QAAQ,CAACW,OAAO,CAACQ,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKV,OAAO,CAAC;IACxE,IAAI,CAACO,WAAW,IAAIA,WAAW,CAACI,KAAK,KAAK,WAAW,EAAE;MACrD,SAAS,CAAC;IACZ;;IAEA;IACAlB,eAAe,CAACO,OAAO,EAAE,YAAY,CAAC;IACtCN,cAAc,CAAEkB,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEZ,OAAO,CAAC,CAAC;;IAE1D;IACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKW,UAAU,CAACX,OAAO,EAAEN,KAAK,CAAC,CAAC;IAE1D,IAAII,OAAO,KAAKR,KAAK,EAAE;MACrB;MACAC,eAAe,CAACO,OAAO,EAAE,QAAQ,CAAC;MAClCc,KAAK,CAAC,6BAA6BtB,KAAK,EAAE,CAAC;MAC3C;IACF;;IAEA;IACA,MAAMuB,SAAS,GAAGzB,KAAK,CACpB0B,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKlB,OAAO,CAAC,CACvCmB,GAAG,CAAEF,IAAI,IAAKA,IAAI,CAACG,EAAE,CAAC,CACtBJ,MAAM,CAAEK,UAAU,IAAK;MACtB,MAAMC,QAAQ,GAAGjC,QAAQ,CAACW,OAAO,CAACQ,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKW,UAAU,CAAC;MACxE,OAAOC,QAAQ,IAAIA,QAAQ,CAACX,KAAK,KAAK,WAAW;IACnD,CAAC,CAAC;;IAEJ;IACAI,SAAS,CAACQ,OAAO,CAAED,QAAQ,IAAKxB,KAAK,CAAC0B,IAAI,CAACF,QAAQ,CAAC,CAAC;IACrD3B,QAAQ,CAAC,CAAC,GAAGG,KAAK,CAAC,CAAC;;IAEpB;IACAL,eAAe,CAACO,OAAO,EAAE,SAAS,CAAC;;IAEnC;IACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKW,UAAU,CAACX,OAAO,EAAEN,KAAK,CAAC,CAAC;EAC5D;EAEAkB,KAAK,CAAC,6BAA6B,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}