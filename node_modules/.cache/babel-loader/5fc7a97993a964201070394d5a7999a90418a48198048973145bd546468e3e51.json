{"ast":null,"code":"const NIL = new Node(null);\nNIL.color = 'black';\nNIL.left = null;\nNIL.right = null;\nNIL.parent = null;\nclass Node {\n  constructor(value) {\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\n    this.value = value;\n    this.color = 'red'; // Нові вузли завжди червоні\n    this.left = NIL;\n    this.right = NIL;\n    this.parent = null;\n  }\n}\nexport function insertNode(root, value) {\n  const newNode = new Node(value);\n  let y = null;\n  let x = root;\n  while (x !== NIL && x !== null) {\n    y = x;\n    if (newNode.value < x.value) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  newNode.parent = y;\n  if (y === null) {\n    root = newNode;\n  } else if (newNode.value < y.value) {\n    y.left = newNode;\n  } else {\n    y.right = newNode;\n  }\n  newNode.left = NIL;\n  newNode.right = NIL;\n  newNode.color = 'red';\n  root = fixInsert(root, newNode);\n  return root;\n}\nfunction fixInsert(root, k) {\n  while (k.parent && k.parent.color === 'red') {\n    if (k.parent === k.parent.parent.left) {\n      let uncle = k.parent.parent.right;\n      if (uncle.color === 'red') {\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.right) {\n          k = k.parent;\n          root = leftRotate(root, k);\n        }\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = rightRotate(root, k.parent.parent);\n      }\n    } else {\n      let uncle = k.parent.parent.left;\n      if (uncle.color === 'red') {\n        k.parent.color = 'black';\n        uncle.color = 'black';\n        k.parent.parent.color = 'red';\n        k = k.parent.parent;\n      } else {\n        if (k === k.parent.left) {\n          k = k.parent;\n          root = rightRotate(root, k);\n        }\n        k.parent.color = 'black';\n        k.parent.parent.color = 'red';\n        root = leftRotate(root, k.parent.parent);\n      }\n    }\n  }\n  root.color = 'black';\n  return root;\n}\nexport function deleteNode(root, value) {\n  let z = searchNode(root, value);\n  if (z === NIL || z === null) return root;\n  let y = z;\n  let yOriginalColor = y.color;\n  let x;\n  if (z.left === NIL) {\n    x = z.right;\n    root = transplant(root, z, z.right);\n  } else if (z.right === NIL) {\n    x = z.left;\n    root = transplant(root, z, z.left);\n  } else {\n    y = treeMinimum(z.right);\n    yOriginalColor = y.color;\n    x = y.right;\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      root = transplant(root, y, y.right);\n      y.right = z.right;\n      y.right.parent = y;\n    }\n    root = transplant(root, z, y);\n    y.left = z.left;\n    y.left.parent = y;\n    y.color = z.color;\n  }\n  if (yOriginalColor === 'black') {\n    root = fixDelete(root, x);\n  }\n  return root;\n}\nfunction transplant(root, u, v) {\n  if (u.parent === null) {\n    root = v;\n  } else if (u === u.parent.left) {\n    u.parent.left = v;\n  } else {\n    u.parent.right = v;\n  }\n  v.parent = u.parent;\n  return root;\n}\nfunction fixDelete(root, x) {\n  while (x !== root && x.color === 'black') {\n    if (x === x.parent.left) {\n      let w = x.parent.right;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = leftRotate(root, x.parent);\n        w = x.parent.right;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.right.color === 'black') {\n          w.left.color = 'black';\n          w.color = 'red';\n          root = rightRotate(root, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.right.color = 'black';\n        root = leftRotate(root, x.parent);\n        x = root;\n      }\n    } else {\n      let w = x.parent.left;\n      if (w.color === 'red') {\n        w.color = 'black';\n        x.parent.color = 'red';\n        root = rightRotate(root, x.parent);\n        w = x.parent.left;\n      }\n      if (w.left.color === 'black' && w.right.color === 'black') {\n        w.color = 'red';\n        x = x.parent;\n      } else {\n        if (w.left.color === 'black') {\n          w.right.color = 'black';\n          w.color = 'red';\n          root = leftRotate(root, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 'black';\n        w.left.color = 'black';\n        root = rightRotate(root, x.parent);\n        x = root;\n      }\n    }\n  }\n  x.color = 'black';\n  return root;\n}\nexport function searchNode(root, value) {\n  let current = root;\n  while (current !== NIL && current !== null) {\n    if (value === current.value) {\n      return current;\n    } else if (value < current.value) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n  return null;\n}\nfunction leftRotate(root, x) {\n  let y = x.right;\n  x.right = y.left;\n  if (y.left !== NIL) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === null) {\n    root = y;\n  } else if (x === x.parent.left) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n  return root;\n}\nfunction rightRotate(root, y) {\n  let x = y.left;\n  y.left = x.right;\n  if (x.right !== NIL) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  if (y.parent === null) {\n    root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n  x.right = y;\n  y.parent = x;\n  return root;\n}\nfunction treeMinimum(x) {\n  while (x.left !== NIL) {\n    x = x.left;\n  }\n  return x;\n}","map":{"version":3,"names":["NIL","Node","color","left","right","parent","constructor","value","id","Math","random","toString","substr","insertNode","root","newNode","y","x","fixInsert","k","uncle","leftRotate","rightRotate","deleteNode","z","searchNode","yOriginalColor","transplant","treeMinimum","fixDelete","u","v","w","current"],"sources":["D:/dfs-rbt-visualization/src/components/RedBlackTree/rbtOperations.js"],"sourcesContent":["const NIL = new Node(null);\r\nNIL.color = 'black';\r\nNIL.left = null;\r\nNIL.right = null;\r\nNIL.parent = null;\r\n\r\nclass Node {\r\n  constructor(value) {\r\n    this.id = Math.random().toString(36).substr(2, 9); // Унікальний ID\r\n    this.value = value;\r\n    this.color = 'red'; // Нові вузли завжди червоні\r\n    this.left = NIL;\r\n    this.right = NIL;\r\n    this.parent = null;\r\n  }\r\n}\r\n\r\nexport function insertNode(root, value) {\r\n  const newNode = new Node(value);\r\n\r\n  let y = null;\r\n  let x = root;\r\n\r\n  while (x !== NIL && x !== null) {\r\n    y = x;\r\n    if (newNode.value < x.value) {\r\n      x = x.left;\r\n    } else {\r\n      x = x.right;\r\n    }\r\n  }\r\n\r\n  newNode.parent = y;\r\n\r\n  if (y === null) {\r\n    root = newNode;\r\n  } else if (newNode.value < y.value) {\r\n    y.left = newNode;\r\n  } else {\r\n    y.right = newNode;\r\n  }\r\n\r\n  newNode.left = NIL;\r\n  newNode.right = NIL;\r\n  newNode.color = 'red';\r\n\r\n  root = fixInsert(root, newNode);\r\n  return root;\r\n}\r\n\r\nfunction fixInsert(root, k) {\r\n  while (k.parent && k.parent.color === 'red') {\r\n    if (k.parent === k.parent.parent.left) {\r\n      let uncle = k.parent.parent.right;\r\n      if (uncle.color === 'red') {\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.right) {\r\n          k = k.parent;\r\n          root = leftRotate(root, k);\r\n        }\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = rightRotate(root, k.parent.parent);\r\n      }\r\n    } else {\r\n      let uncle = k.parent.parent.left;\r\n      if (uncle.color === 'red') {\r\n        k.parent.color = 'black';\r\n        uncle.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        k = k.parent.parent;\r\n      } else {\r\n        if (k === k.parent.left) {\r\n          k = k.parent;\r\n          root = rightRotate(root, k);\r\n        }\r\n        k.parent.color = 'black';\r\n        k.parent.parent.color = 'red';\r\n        root = leftRotate(root, k.parent.parent);\r\n      }\r\n    }\r\n  }\r\n  root.color = 'black';\r\n  return root;\r\n}\r\n\r\nexport function deleteNode(root, value) {\r\n  let z = searchNode(root, value);\r\n  if (z === NIL || z === null) return root;\r\n\r\n  let y = z;\r\n  let yOriginalColor = y.color;\r\n  let x;\r\n\r\n  if (z.left === NIL) {\r\n    x = z.right;\r\n    root = transplant(root, z, z.right);\r\n  } else if (z.right === NIL) {\r\n    x = z.left;\r\n    root = transplant(root, z, z.left);\r\n  } else {\r\n    y = treeMinimum(z.right);\r\n    yOriginalColor = y.color;\r\n    x = y.right;\r\n    if (y.parent === z) {\r\n      x.parent = y;\r\n    } else {\r\n      root = transplant(root, y, y.right);\r\n      y.right = z.right;\r\n      y.right.parent = y;\r\n    }\r\n    root = transplant(root, z, y);\r\n    y.left = z.left;\r\n    y.left.parent = y;\r\n    y.color = z.color;\r\n  }\r\n\r\n  if (yOriginalColor === 'black') {\r\n    root = fixDelete(root, x);\r\n  }\r\n\r\n  return root;\r\n}\r\n\r\nfunction transplant(root, u, v) {\r\n  if (u.parent === null) {\r\n    root = v;\r\n  } else if (u === u.parent.left) {\r\n    u.parent.left = v;\r\n  } else {\r\n    u.parent.right = v;\r\n  }\r\n  v.parent = u.parent;\r\n  return root;\r\n}\r\n\r\nfunction fixDelete(root, x) {\r\n  while (x !== root && x.color === 'black') {\r\n    if (x === x.parent.left) {\r\n      let w = x.parent.right;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = leftRotate(root, x.parent);\r\n        w = x.parent.right;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.right.color === 'black') {\r\n          w.left.color = 'black';\r\n          w.color = 'red';\r\n          root = rightRotate(root, w);\r\n          w = x.parent.right;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.right.color = 'black';\r\n        root = leftRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    } else {\r\n      let w = x.parent.left;\r\n      if (w.color === 'red') {\r\n        w.color = 'black';\r\n        x.parent.color = 'red';\r\n        root = rightRotate(root, x.parent);\r\n        w = x.parent.left;\r\n      }\r\n      if (w.left.color === 'black' && w.right.color === 'black') {\r\n        w.color = 'red';\r\n        x = x.parent;\r\n      } else {\r\n        if (w.left.color === 'black') {\r\n          w.right.color = 'black';\r\n          w.color = 'red';\r\n          root = leftRotate(root, w);\r\n          w = x.parent.left;\r\n        }\r\n        w.color = x.parent.color;\r\n        x.parent.color = 'black';\r\n        w.left.color = 'black';\r\n        root = rightRotate(root, x.parent);\r\n        x = root;\r\n      }\r\n    }\r\n  }\r\n  x.color = 'black';\r\n  return root;\r\n}\r\n\r\nexport function searchNode(root, value) {\r\n  let current = root;\r\n  while (current !== NIL && current !== null) {\r\n    if (value === current.value) {\r\n      return current;\r\n    } else if (value < current.value) {\r\n      current = current.left;\r\n    } else {\r\n      current = current.right;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction leftRotate(root, x) {\r\n  let y = x.right;\r\n  x.right = y.left;\r\n  if (y.left !== NIL) {\r\n    y.left.parent = x;\r\n  }\r\n  y.parent = x.parent;\r\n  if (x.parent === null) {\r\n    root = y;\r\n  } else if (x === x.parent.left) {\r\n    x.parent.left = y;\r\n  } else {\r\n    x.parent.right = y;\r\n  }\r\n  y.left = x;\r\n  x.parent = y;\r\n  return root;\r\n}\r\n\r\nfunction rightRotate(root, y) {\r\n  let x = y.left;\r\n  y.left = x.right;\r\n  if (x.right !== NIL) {\r\n    x.right.parent = y;\r\n  }\r\n  x.parent = y.parent;\r\n  if (y.parent === null) {\r\n    root = x;\r\n  } else if (y === y.parent.right) {\r\n    y.parent.right = x;\r\n  } else {\r\n    y.parent.left = x;\r\n  }\r\n  x.right = y;\r\n  y.parent = x;\r\n  return root;\r\n}\r\n\r\nfunction treeMinimum(x) {\r\n  while (x.left !== NIL) {\r\n    x = x.left;\r\n  }\r\n  return x;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}