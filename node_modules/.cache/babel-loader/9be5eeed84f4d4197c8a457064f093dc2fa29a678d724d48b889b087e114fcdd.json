{"ast":null,"code":"export const initializeDFS = (nodes, endNodeId) => {\n  const updatedNodes = nodes.map(function (n) {\n    return {\n      ...n,\n      state: 'unvisited'\n    };\n  });\n  return {\n    nodes: updatedNodes,\n    stepHistory: [],\n    currentNode: null,\n    targetNode: endNodeId,\n    stack: []\n  };\n};\nexport const startDFSProcess = (startId, endId, setIsRunning, setIsPaused, setTargetNode, setStack, setNodes) => {\n  setIsRunning(true);\n  setIsPaused(false);\n  setTargetNode(endId);\n  setNodes(function (p) {\n    return p.map(function (n) {\n      return {\n        ...n,\n        state: 'unvisited'\n      };\n    });\n  });\n  setStack([startId]);\n};\nexport const performDFSStep = async ({\n  nodesRef,\n  edges,\n  stack,\n  setStack,\n  updateNodeState,\n  setStepHistory,\n  delay,\n  targetNode,\n  isPausedRef,\n  setIsRunning\n}) => {\n  let candidate;\n  let candidateNode;\n  while (true) {\n    if (stack.length === 0) {\n      alert('Цільова вершина не знайдена');\n      setIsRunning(false);\n      return;\n    }\n    if (isPausedRef.current) return;\n    candidate = stack[stack.length - 1];\n    candidateNode = nodesRef.current.find(function (n) {\n      return n.id === candidate;\n    });\n    if (!candidateNode || candidateNode.state !== 'unvisited') {\n      setStack(function (prev) {\n        return prev.slice(0, -1);\n      });\n      continue;\n    }\n    break;\n  }\n  const current = candidate;\n  updateNodeState(current, 'processing');\n  setStepHistory(function (h) {\n    return [...h, current];\n  });\n  await new Promise(function (r) {\n    return setTimeout(r, delay);\n  });\n  if (current === targetNode) {\n    updateNodeState(current, 'target');\n    alert('Знайдено кінцеву вершину V' + targetNode);\n    setIsRunning(false);\n    return;\n  }\n  const allNeighbors = edges.filter(function (e) {\n    return e.from === current;\n  }).map(function (e) {\n    return e.to;\n  });\n  const unvisitedNeighbors = allNeighbors.filter(function (id) {\n    const nn = nodesRef.current.find(function (n) {\n      return n.id === id;\n    });\n    return nn && nn.state === 'unvisited';\n  });\n  setStack(function (s) {\n    return [...s, ...unvisitedNeighbors.reverse()];\n  });\n  updateNodeState(current, 'visited');\n  await new Promise(function (r) {\n    return setTimeout(r, delay);\n  });\n};\nexport const pauseDFSProcess = (isRunning, setIsPaused, isPaused) => {\n  if (!isRunning) return;\n  setIsPaused(!isPaused);\n};\nexport const undoDFSProcess = (stepHistory, setStepHistory, setNodes, setStack, setCurrentNode) => {\n  if (stepHistory.length === 0) {\n    alert('Немає попередніх кроків для відкату.');\n    return;\n  }\n  const newHistory = [...stepHistory];\n  const lastVisitedNode = newHistory.pop();\n  setNodes(function (prev) {\n    return prev.map(function (n) {\n      return n.id === lastVisitedNode ? {\n        ...n,\n        state: 'unvisited'\n      } : n;\n    });\n  });\n  setStepHistory(newHistory);\n  setStack(function (prev) {\n    return [...prev, lastVisitedNode];\n  });\n  const previousNode = newHistory[newHistory.length - 1] || null;\n  setCurrentNode(previousNode);\n};\nexport const resetDFSProcess = (setNodes, setStepHistory, setCurrentNode, setTargetNode, setIsRunning, setIsPaused, setStack) => {\n  setNodes(function (prev) {\n    return prev.map(function (n) {\n      return {\n        ...n,\n        state: 'unvisited'\n      };\n    });\n  });\n  setStepHistory([]);\n  setCurrentNode(null);\n  setTargetNode(null);\n  setIsRunning(false);\n  setIsPaused(false);\n  setStack([]);\n};","map":{"version":3,"names":["initializeDFS","nodes","endNodeId","updatedNodes","map","n","state","stepHistory","currentNode","targetNode","stack","startDFSProcess","startId","endId","setIsRunning","setIsPaused","setTargetNode","setStack","setNodes","p","performDFSStep","nodesRef","edges","updateNodeState","setStepHistory","delay","isPausedRef","candidate","candidateNode","length","alert","current","find","id","prev","slice","h","Promise","r","setTimeout","allNeighbors","filter","e","from","to","unvisitedNeighbors","nn","s","reverse","pauseDFSProcess","isRunning","isPaused","undoDFSProcess","setCurrentNode","newHistory","lastVisitedNode","pop","previousNode","resetDFSProcess"],"sources":["D:/kr/src/components/Graph/algorithms/dfs.js"],"sourcesContent":["export const initializeDFS = (nodes, endNodeId) => {\r\n  const updatedNodes = nodes.map(function(n){return {...n, state:'unvisited'}})\r\n  return {nodes: updatedNodes, stepHistory: [], currentNode: null, targetNode: endNodeId, stack: []}\r\n}\r\n\r\nexport const startDFSProcess = (startId, endId, setIsRunning, setIsPaused, setTargetNode, setStack, setNodes) => {\r\n  setIsRunning(true)\r\n  setIsPaused(false)\r\n  setTargetNode(endId)\r\n  setNodes(function(p){return p.map(function(n){return {...n,state:'unvisited'}})})\r\n  setStack([startId])\r\n}\r\n\r\nexport const performDFSStep = async ({nodesRef, edges, stack, setStack, updateNodeState, setStepHistory, delay, targetNode, isPausedRef, setIsRunning}) => {\r\n  let candidate\r\n  let candidateNode\r\n  while (true) {\r\n    if (stack.length === 0) {\r\n      alert('Цільова вершина не знайдена')\r\n      setIsRunning(false)\r\n      return\r\n    }\r\n    if (isPausedRef.current) return\r\n    candidate = stack[stack.length - 1]\r\n    candidateNode = nodesRef.current.find(function(n){return n.id===candidate})\r\n    if (!candidateNode || candidateNode.state !== 'unvisited') {\r\n      setStack(function(prev){return prev.slice(0,-1)})\r\n      continue\r\n    }\r\n    break\r\n  }\r\n\r\n  const current = candidate\r\n  updateNodeState(current, 'processing')\r\n  setStepHistory(function(h){return [...h,current]})\r\n  await new Promise(function(r){return setTimeout(r,delay)})\r\n\r\n  if (current === targetNode) {\r\n    updateNodeState(current, 'target')\r\n    alert('Знайдено кінцеву вершину V' + targetNode)\r\n    setIsRunning(false)\r\n    return\r\n  }\r\n\r\n  const allNeighbors = edges.filter(function(e){return e.from===current}).map(function(e){return e.to})\r\n  const unvisitedNeighbors = allNeighbors.filter(function(id){\r\n    const nn = nodesRef.current.find(function(n){return n.id===id})\r\n    return nn && nn.state==='unvisited'\r\n  })\r\n\r\n  setStack(function(s){return [...s,...unvisitedNeighbors.reverse()]})\r\n  updateNodeState(current,'visited')\r\n  await new Promise(function(r){return setTimeout(r,delay)})\r\n}\r\n\r\nexport const pauseDFSProcess = (isRunning, setIsPaused, isPaused) => {\r\n  if (!isRunning) return\r\n  setIsPaused(!isPaused)\r\n}\r\n\r\nexport const undoDFSProcess = (stepHistory, setStepHistory, setNodes, setStack, setCurrentNode) => {\r\n  if (stepHistory.length===0) {\r\n    alert('Немає попередніх кроків для відкату.')\r\n    return\r\n  }\r\n  const newHistory = [...stepHistory]\r\n  const lastVisitedNode = newHistory.pop()\r\n  setNodes(function(prev){return prev.map(function(n){return n.id===lastVisitedNode?{...n,state:'unvisited'}:n})})\r\n  setStepHistory(newHistory)\r\n  setStack(function(prev){return [...prev,lastVisitedNode]})\r\n  const previousNode = newHistory[newHistory.length-1]||null\r\n  setCurrentNode(previousNode)\r\n}\r\n\r\nexport const resetDFSProcess = (setNodes, setStepHistory, setCurrentNode, setTargetNode, setIsRunning, setIsPaused, setStack) => {\r\n  setNodes(function(prev){return prev.map(function(n){return {...n,state:'unvisited'}})})\r\n  setStepHistory([])\r\n  setCurrentNode(null)\r\n  setTargetNode(null)\r\n  setIsRunning(false)\r\n  setIsPaused(false)\r\n  setStack([])\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}